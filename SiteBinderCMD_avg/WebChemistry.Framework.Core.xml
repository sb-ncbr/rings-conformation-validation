<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebChemistry.Framework.Core</name>
    </assembly>
    <members>
        <member name="T:WebChemistry.Framework.Core.Collections.HeapDirection">
            <summary>
            Specifies the order in which a Heap will Dequeue items.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Collections.HeapDirection.Increasing">
            <summary>
            Items are Dequeued in Increasing order from least to greatest.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Collections.HeapDirection.Decreasing">
            <summary>
            Items are Dequeued in Decreasing order, from greatest to least.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.LambdaHelpers.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            Performs an action on each item in a list, used to shortcut a "foreach" loop
            </summary>
            <typeparam name="T">Type contained in List</typeparam>
            <param name="collection">List to enumerate over</param>
            <param name="action">Lambda Function to be performed on all elements in List</param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.LambdaHelpers.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each item in a list, used to shortcut a "foreach" loop
            </summary>
            <typeparam name="T">Type contained in List</typeparam>
            <param name="collection">List to enumerate over</param>
            <param name="action">Lambda Function to be performed on all elements in List</param>
        </member>
        <member name="F:WebChemistry.Framework.Core.Collections.FibonacciHeapCell`2.Marked">
            <summary>
            Determines of a Node has had a child cut from it before
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Collections.FibonacciHeapCell`2.Degree">
            <summary>
            Determines the depth of a node
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.FibonacciHeap`2.UpdateNodesDegree(WebChemistry.Framework.Core.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Updates the degree of a node, cascading to update the degree of the
            parents if nessecary
            </summary>
            <param name="parentNode"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.FibonacciHeap`2.UpdateNext">
            <summary>
            Updates the Next pointer, maintaining the heap
            by folding duplicate heap degrees into eachother
            Takes O(lg(N)) time amortized
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.FibonacciHeap`2.ReduceNodes(WebChemistry.Framework.Core.Collections.FibonacciHeapCell{`0,`1},WebChemistry.Framework.Core.Collections.FibonacciHeapCell{`0,`1})">
            <summary>
            Given two nodes, adds the child node as a child of the parent node
            </summary>
            <param name="parentNode"></param>
            <param name="childNode"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.PrefixTreeMap`1.Add(System.String,`0)">
            <summary>
            Adds a word to the tree.
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Collections.PrefixTreeMap`1.Match(System.String,System.Nullable{System.Int32})">
            <summary>
            Matches a prefix.
            </summary>
            <param name="prefix"></param>
            <param name="maxMatches"></param>
            <returns>Dictionary with OrdinalIgnoreCase comparer.</returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.AsyncEx">
            <summary>
            AsyncCTP Extensions
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.AsyncEx.GetAwaiter``1(WebChemistry.Framework.Core.Computation{``0})">
            <summary>
            Allows the computation object to be awaited.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="computation"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Computation">
            <summary>
            Represent a computation with no result (represented by System.Unit :)).
            Also contains static functions to create (relay) computations.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Computation.DefaultScheduler">
            <summary>
            Default scheduler to use for observing Computation events.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation.Create``1(System.Func{``0})">
            <summary>
            Creates a relay computation. Ignores progress tracking.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation.Create``1(System.Func{WebChemistry.Framework.Core.ComputationProgress,``0})">
            <summary>
            Creates a relay computation.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation.Create(System.Action)">
            <summary>
            Creates a relay computation. Ignores progress tracking.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation.Create(System.Action{WebChemistry.Framework.Core.ComputationProgress})">
            <summary>
            Creates a relay computation.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Computation`1">
            <summary>
            An abstract class representing a computation with progress tracking, exception handling and the sorts.
            Also, Fluent(TM).
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="F:WebChemistry.Framework.Core.Computation`1.Empty">
            <summary>
            Empty computation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Computation`1.Progress">
            <summary>
            Progress tracking.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Computation`1.IsCancelled">
            <summary>
            To make the life easier when Cancel is called.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.OnRun">
            <summary>
            Function to be overridden by child types...
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.RunAsync(System.Action{`0},System.Action,System.Action{System.Exception})">
            <summary>
            Runs the computation asynchronously.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if RunAsync is called more than once.</exception>
            <param name="onCompleted"></param>
            <param name="onCancelled"></param>
            <param name="onError"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.RunAsync">
            <summary>
            Runs the computation asynchronously.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if RunAsync is called more than once.</exception>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.RunSynchronously">
            <summary>
            Runs the computation synchronously.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if RunSynchronously is called more than once.</exception>
            <returns>Result of the computation.</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.Cancel">
            <summary>
            Cancel the computation.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.ObservedOn(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Sets the scheduler on which the ObservedBy, ReactsOnCancellationBy, ReactsOnExceptionBy are executed.
            This overrides the previous scheduler set by this function.
            Default value is Scheduler.Dispatcher.
            </summary>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.ExecutedOn(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Changes the scheduler on which the computation is executed on.
            This overrides the previous scheduler set by this function.
            Default is Scheduler.ThreadPool.
            This does not affect RunSynchronously.
            </summary>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.WhenProgressUpdated(System.Action{WebChemistry.Framework.Core.ProgressTick})">
            <summary>
            Observes the computation's progress.
            Observed on the scheduler set by ObserveOn function.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.WhenCancelled(System.Action)">
            <summary>
            Executes an action if the computation is cancelled.
            Executed by the scheduler set by ObserveOn function.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.WhenError(System.Action{System.Exception})">
            <summary>
            Executes an action if an exception (other than OperationCancelledException) is executed.
            Executed by the scheduler set by ObserveOn function.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.WhenCompleted(System.Action{`0})">
            <summary>
            Executes an action when(if) the computation is completed.
            Executed by the scheduler set by ObserveOn function.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.WhenStarted(System.Action)">
            <summary>
            Executed when the computation starts.
            Executed by the scheduler set by ObserveOn function.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.WhenFinished(System.Action)">
            <summary>
            Executed after the computation finishes.
            Executed by the scheduler set by ObserveOn function.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Computation`1.#ctor">
            <summary>
            C'tor
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.ComputationAwaiter`1">
            <summary>
            A ComputationAwaiter.
            </summary>
            <typeparam name="TResult">Result of the computation</typeparam>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationAwaiter`1.IsCompleted">
            <summary>
            Gets if the computation has completed ...
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Starts the await ...
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationAwaiter`1.GetResult">
            <summary>
            Ends the await ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationAwaiter`1.#ctor(WebChemistry.Framework.Core.Computation{`0})">
            <summary>
            Creates the awaiter object.
            </summary>
            <param name="computation"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.ComputationCancelledException">
            <summary>
            Used to cancel computations.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.ComputationEx">
            <summary>
            Extension methods for computations.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationEx.AsComputation``1(System.Func{``0})">
            <summary>
            Wraps the function into RelayComputation.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationEx.AsComputation``1(System.Func{WebChemistry.Framework.Core.ComputationProgress,``0})">
            <summary>
            Wraps the function into RelayComputation.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationEx.AsComputation(System.Action)">
            <summary>
            Wraps the action into RelayComputation.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationEx.AsComputation(System.Action{WebChemistry.Framework.Core.ComputationProgress})">
            <summary>
            Wraps the action into RelayComputation.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.ComputationProgress">
            <summary>
            Represents a computation progress.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.ComputationProgress.DummyInstance">
            <summary>
            A dummy instance that is not connected to any computation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.StatusText">
            <summary>
            StatusText property.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.Current">
            <summary>
            Current progress property.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.Length">
            <summary>
            Computation length property.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.IsIndeterminate">
            <summary>
            IsIndeterminate property.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.IsComputing">
            <summary>
            IsComputing property.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.CanCancel">
            <summary>
            CanCancel property.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.ThrowIfCancellationRequested">
            <summary>
            Cancellation support.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.Update(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Update the status.
            </summary>
            <param name="statusText"></param>
            <param name="isIndeterminate"></param>
            <param name="currentProgress"></param>
            <param name="maxProgress"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.UpdateStatus(System.String)">
            <summary>
            Updates the status text of the computation.
            </summary>
            <param name="status">Status text.</param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.UpdateProgress(System.Int32)">
            <summary>
            Updates the current progress of the computation.        
            If Current is greater than Length, then Current = Length.
            </summary>
            <param name="current">Current computation progress.</param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.UpdateLength(System.Int32)">
            <summary>
            Updates the length of the computation.
            If the length is non-zero, IsIndetermate is set to false.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.UpdateIsIndeterminate(System.Boolean)">
            <summary>
            Determines if the computation can currently track progress.
            </summary>
            <param name="isIndeterminate"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.UpdateProgress(System.Int32,System.Int32)">
            <summary>
            Combines UpdateProgress(current) and UpdateLength(length)
            </summary>
            <param name="current"></param>
            <param name="length"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.UpdateCanCancel(System.Boolean)">
            <summary>
            Determines whether the computation can be cancelled at the given time.
            </summary>
            <param name="canCancel"></param>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.Status">
            <summary>
            Used by Computation object.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.Started">
            <summary>
            Used by the Computation object.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.Finished">
            <summary>
            Used by the Computation object.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.Exception">
            <summary>
            Used by the Computation object.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.Cancelled">
            <summary>
            Used by the Computation object.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.RequestCancel">
            <summary>
            Used by the Computation object.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ComputationProgress.ObserverScheduler">
            <summary>
            Set by Computation object.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.#ctor">
            <summary>
            Used by the Computation object.
            </summary>    
        </member>
        <member name="E:WebChemistry.Framework.Core.ComputationProgress.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComputationProgress.NotifyPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.IComputationBase">
            <summary>
            Computation base to support "anonymous" observing and cancellation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IComputationBase.Progress">
            <summary>
            Current computation's progress.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.IComputationBase.Cancel">
            <summary>
            Cancels the task. default(TResult) is returned.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.IComputation`2">
            <summary>
            Interface for computation encapsulation.
            </summary>
            <typeparam name="TResult">Result of the computation.</typeparam>
            <typeparam name="TProgress">Type of computation's progress report.</typeparam>
        </member>
        <member name="M:WebChemistry.Framework.Core.IComputation`2.RunAsync(System.Action{`0},System.Action,System.Action{System.Exception})">
            <summary>
            Creates a task representing a future result. This is pretty much equivalent to the TaskEx.Run function.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if RunAsync is called more than once.</exception>
            <returns>Task representing a result.</returns>       
        </member>
        <member name="M:WebChemistry.Framework.Core.IComputation`2.RunSynchronously">
            <summary>
            Runs the computation synchronously.
            </summary>
             <exception cref="T:System.InvalidOperationException">This is thrown if RunSynchronously is called more than once.</exception>
            <returns>Result of the computation</returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.ProgressTick">
            <summary>
            Represents a ComputationProgress's tick.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ProgressTick.StatusText">
            <summary>
            Status of the computation. For example "Fetching Data..."
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ProgressTick.IsIndeterminate">
            <summary>
            Determines if the computation can track progress.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ProgressTick.Current">
            <summary>
            Current computation progress.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ProgressTick.Length">
            <summary>
            Computation length.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ProgressTick.CanCancel">
            <summary>
            Can cancel.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ProgressTick.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of progress tick.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.RelayComputation">
            <summary>
            Represents a computation that invokes a single action.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.RelayComputation.OnRun">
            <summary>
            OnRun override. Calls the function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RelayComputation.#ctor(System.Action{WebChemistry.Framework.Core.ComputationProgress})">
            <summary>
            ComputationProgress object is passed to the action.
            </summary>
            <param name="action">Action to be invoked.</param>
        </member>
        <member name="M:WebChemistry.Framework.Core.RelayComputation.#ctor(System.Action)">
            <summary>
            
            </summary>
            <param name="function">Action to be invoked.</param>
        </member>
        <member name="T:WebChemistry.Framework.Core.RelayComputation`1">
            <summary>
            Represents a computation that calls a single function.
            </summary>
            <typeparam name="TResult">Result of the computation</typeparam>
        </member>
        <member name="M:WebChemistry.Framework.Core.RelayComputation`1.OnRun">
            <summary>
            OnRun override. Calls the function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RelayComputation`1.#ctor(System.Func{WebChemistry.Framework.Core.ComputationProgress,`0})">
            <summary>
            ComputationProgress object is passed to the function.
            </summary>
            <param name="function">Function to be computed.</param>
        </member>
        <member name="M:WebChemistry.Framework.Core.RelayComputation`1.#ctor(System.Func{`0})">
            <summary>
            
            </summary>
            <param name="function">Function to be computed.</param>
        </member>
        <member name="T:WebChemistry.Framework.Core.CoreEx">
            <summary>
            Miscelaneous extensions.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.Memoize``2(System.Func{``0,``1})">
            <summary>
            Memoizes a function using a Dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToSingletonEnumerable``1(``0)">
            <summary>
            Convert an object to a singleton IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToSingletonArray``1(``0)">
            <summary>
            Convert an object to a singleton array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.DefaultIfNull``1(``0,``0)">
            <summary>
            Returns a default value if obj is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.MustBe``1(System.Object)">
            <summary>
            Cast an object to a specified type. Throw if not compatible.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.DefaultIfNull``1(System.Nullable{``0},``0)">
            <summary>
            Returns a default value if obj is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.DefaultIfNotPresent``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Return a default value if it's not present in a dictionary.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ObservePropertyChanged``2(``1,``0,System.Action{``0,``1,System.String})">
            <summary>
            Registers a weak listener for the PropertyChanged event.
            Arguments passed to callback are listener, sender and PropertyName.
            </summary>
            <typeparam name="TListener"></typeparam>
            <typeparam name="TSource"></typeparam>
            <param name="obj"></param>
            <param name="listener"></param>
            <param name="onEventAction"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ObserveInteractivePropertyChanged``2(``1,``0,System.Action{``0,WebChemistry.Framework.Core.IInteractive})">
            <summary>
            Registers a listener notify event on IsSelected and IsHighligted properties.
            The interactive object is passed to the callback as the second parameter.
            </summary>
            <typeparam name="TListener"></typeparam>
            <typeparam name="TSource"></typeparam>
            <param name="obj"></param>
            <param name="listener"></param>
            <param name="onChanged"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ObserveCollectionChanged``1(System.Collections.Specialized.INotifyCollectionChanged,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Creates an observer for an observable collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ObserveCollectionChanged``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Creates an observer for an observable collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.GetPropertyChangedObservable(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Creates observable of property name from the PropertyChanged event.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the type of xs is IList and if so, casts it to it.
            Otherwise calls xs.ToArray()
            Be careful when using this as when casted, it's the same object as apposed to LINQ's ToList().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.JoinBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Join a collection to a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.JoinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
            Joins a specific value to a string.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="xs"></param>
            <param name="selector"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToJsonString``1(``0,System.Boolean)">
            <summary>
            Converts an object to a JSON string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.EqualIgnoreCase(System.String,System.String)">
            <summary>
            Invariant string compare, ignores case.
            </summary>
            <param name="str"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.EqualOrdinal(System.String,System.String)">
            <summary>
            ordinal equal.
            </summary>
            <param name="str"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.EqualOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            Invariant string compare, ignores case, ordinal.
            </summary>
            <param name="str"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.OtherAtom(WebChemistry.Framework.Core.IBond,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Other atom of the bond.
            </summary>
            <param name="bond"></param>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ClonePropertiesFrom(WebChemistry.Framework.Core.IPropertyObject,WebChemistry.Framework.Core.IPropertyObject)">
            <summary>
            Clones dynamic properties from another object.
            </summary>
            <param name="obj"></param>
            <param name="from"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.SetProperties(WebChemistry.Framework.Core.IPropertyObject,System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Property})">
            <summary>
            Sets properties.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ContainsAtom(WebChemistry.Framework.Core.IStructure,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Determines whether the structure contains an atom.
            </summary>
            <param name="structure"></param>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts an Enumerable of T to a HashSet of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <returns>HashSet of the input enumerable</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToRandomlyOrderedArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the enumerable to a randomly ordered array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly shuffle elements in the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.RandomSample``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get a random sample from an array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Created an read-only collection from the enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <returns>ReadOnlyCollection of the input enumerable.</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToStringInvariant(System.Double)">
            <summary>
            Converts double to string using invariant culture.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.CoreEx.ToStringInvariant(System.Double,System.String)">
            <summary>
            Converts double to string using invariant culture and specified format.
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.HashHelper">
            <summary>
            Hash-code helpers.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.HashHelper.GetHashFromLong(System.Int64)">
            <summary>
            Computes a 32-bit hash from a 64-bit value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ICloneable`1.Clone">
            <summary>
            Creates a deep copy of the object
            </summary>
            <returns>Deep copy of the object</returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.PropertyDescriptor">
            <summary>
            Non-generic property descriptor.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.PropertyDescriptor.IsImmutable">
            <summary>
            Determines if the property is immutable.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.PropertyDescriptor.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.PropertyDescriptor.Category">
            <summary>
            Property category.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.PropertyDescriptor.AutoClone">
            <summary>
            Auto clone
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.PropertyDescriptor.OnClone">
            <summary>
            Used to create a deep copy of the property.
            Args: newAtoms, newBonds, oldObject
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyDescriptor.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.Func{WebChemistry.Framework.Core.AtomCollection,WebChemistry.Framework.Core.BondCollection,System.Object,System.Object})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="isImmutable"></param>
            <param name="category"></param>
            <param name="onClone"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.PropertyDescriptor`1">
            <summary>
            Property descriptor. Bu default, properties are immutable (can only be set once).
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyDescriptor`1.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.Func{WebChemistry.Framework.Core.AtomCollection,WebChemistry.Framework.Core.BondCollection,System.Object,System.Object})">
            <summary>
            Crates are property descriptor.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="isImmutable">Is set to true, the property can only be set once.</param>
            <param name="category"></param>
            <param name="onClone"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.PropertyObject">
            <summary>
            A base class for objects that need dynamic properties.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyObject.GetProperty``1(WebChemistry.Framework.Core.PropertyDescriptor{``0})">
            <summary>
            Gets the property. If the property does not exist, an exception is thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyObject.GetProperty``1(WebChemistry.Framework.Core.PropertyDescriptor{``0},``0)">
            <summary>
            Gets the property. If the property does not exist, the default value is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyObject.SetProperty``1(WebChemistry.Framework.Core.PropertyDescriptor{``0},``0)">
            <summary>
            Sets the value of the given property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="P:WebChemistry.Framework.Core.PropertyObject.Properties">
            <summary>
            Get a read-only collection of the properties.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyObject.SetProperty(WebChemistry.Framework.Core.Property)">
            <summary>
            Sets the property.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.PropertyObject.RemoveProperty(WebChemistry.Framework.Core.PropertyDescriptor)">
            <summary>
            Removes the property.
            </summary>
            <param name="property"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.NonUniqueAtomIdException">
            <summary>
            Thrown if two atoms with the same id appear in the same "context" (collection)
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.NonUniqueAtomIdException.First">
            <summary>
            Atom that has occurred "sooner"
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.NonUniqueAtomIdException.Second">
            <summary>
            Atom that has occurred "later"
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.NonUniqueAtomIdException.Message">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.NonUniqueAtomIdException.#ctor(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Create this exception when atoms with the same Id appear in one collection.
            </summary>
            <param name="first">Atom that occurred sooner.</param>
            <param name="second">Atom that occurred later.</param>
        </member>
        <member name="T:WebChemistry.Framework.Core.Benchmark">
            <summary>
            Benchmarking helper.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Benchmark.Run(System.Action,System.Boolean,System.Int32,System.Boolean,System.String,System.Boolean)">
            <summary>
            Runs a timing/memory benchmark of an Action.
            </summary>
            <param name="a">The action to time.</param>
            <param name="report">Write the result out to the Console?</param>
            <param name="timesToRun">Number of times to run the computation.</param>
            <param name="measureMemory">Measure the memory used? "Ignores" timesToRun.</param>
            <param name="name">Name of the computation.</param>
            <param name="runToJIT">Run the computation once before measuring?</param>
            <returns>The time of the computation averaged over running the computation timesToRun times and the heap size difference in bytes.</returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.ComparerHelper">
            <summary>
            An utility class to quickly create comparers from lambdas
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComparerHelper.GetEqualityComparer``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Creates an equality comparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="comp"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ComparerHelper.GetComparer``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Creates a comparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="comp"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.EnumHelper`1">
            <summary>
            A helper class for faster enumeration operations.
            </summary>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:WebChemistry.Framework.Core.EnumHelper`1.ToStringFast(`0)">
            <summary>
            Converts the value to string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.EnumHelper`1.ParseFast(System.String)">
            <summary>
            Parses the value, ignores case.
            
            Can throw if value not present.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.EnumHelper`1.TryParseFast(System.String,`0@)">
            <summary>
            Parses the value, ignores case.
            </summary>
            <param name="value"></param>
            <param name="ret"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.EnumHelper">
            <summary>
            A helper class for handling enums.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.EnumHelper.GetNames``1">
            <summary>
            Return names of the enum fields.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.EnumHelper.Parse``1(System.String)">
            <summary>
            Parse an enum.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.EnumHelper.ToString``1(``0)">
            <summary>
            Converts the enum to string using a cache.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Lazy">
            <summary>
            Helpers for lazy type.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Lazy.Create``1(System.Func{``0},System.Boolean)">
            <summary>
            Creates an instance of a Lazy value type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="isThreadSafe"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporterExtensions.GetExporter``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            Exporter extension method for all IEnumerableOfT
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="separator"></param>
            <param name="xmlRootName"></param>
            <param name="xmlElementName"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporterExtensions.ToCsvString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts a list of elements to a CSV string. Automatically add all properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.ColumnType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.ColumnType.String">
            <summary>
            The value is enclosed in " "
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.ColumnType.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.ExportableColumn">
            <summary>
            Base information about columns.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ExportableColumn.HeaderString">
            <summary>
            Column header.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ExportableColumn.Description">
            <summary>
            Column description.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ExportableColumn.ColumnType">
            <summary>
            Type of the column.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.ExportableColumn`1">
            <summary>
            Represents custom exportable column with a expression for the property name
            and a custom format string
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.ListExporter`1">
            <summary>
            Exporter that uses Expression tree parsing to work out what values to export for 
            columns, and will use additional data as specified in the List of ExportableColumn
            which defines whethere to use custom headers, or formatted output
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WebChemistry.Framework.Core.ListExporter`1.Columns">
            <summary>
            Get the columns
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String)">
            <summary>
            Creates the exporter.
            </summary>
            <param name="sourceList"></param>
            <param name="separator"></param>
            <param name="xmlRootName"></param>
            <param name="xmlElementName"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.AddExportableColumn(System.Func{`0,System.Object},WebChemistry.Framework.Core.ColumnType,System.String,System.String)">
            <summary>
            Adds a columns.
            </summary>
            <param name="func"></param>
            <param name="type"></param>
            <param name="headerString"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.AddNumericColumn(System.Func{`0,System.Object},System.String,System.String)">
            <summary>
            Adds a numeric column
            </summary>
            <param name="func"></param>
            <param name="headerString"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.AddPropertyColumns">
            <summary>
            Automatically add columns for each property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.AddPropertyColumn(System.String,System.String)">
            <summary>
            Adds a columns for a specific property/
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.AddStringColumn(System.Func{`0,System.Object},System.String,System.String)">
            <summary>
            Adds a string column.
            </summary>
            <param name="func"></param>
            <param name="headerString"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.WriteCsvString(System.IO.TextWriter)">
            <summary>
            Export all specified columns as a string, 
            using seperator and column data provided
            where we may use custom or default headers 
            (depending on whether a custom header string was supplied)
            where we may use custom fomatted column data or default data 
            (depending on whether a custom format string was supplied)
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.ToDictionaryList">
            <summary>
            Convert the object a dictionary list. Ordinal comparer is used for the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.ToXml">
            <summary>
            Convert the list to XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ListExporter`1.ToCsvString">
            <summary>
            Convert the list to a CSV string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Maybe`1">
            <summary>
            An implementation of the Haskell's Maybe type.
            data Maybe a = Just a | Nothing
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Core.Maybe`1.Just">
            <summary>
            Encapsulates a value.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Maybe`1.Just.Value">
            <summary>
            The inner value.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Just.ToString">
            <summary>
            Returns Value.ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Just.GetHashCode">
            <summary>
            Returns Value.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Just.Equals(System.Object)">
            <summary>
            Checks if the other object is Just and if so, compares the inner values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Just.#ctor(`0)">
            <summary>
            Wrap the value into a Maybe object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.Maybe`1.Nothing">
            <summary>
            Represents an empty result. A singleton.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Maybe`1.Nothing.Instance">
            <summary>
            A singleton instance of the Nothing type.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Nothing.Equals(System.Object)">
            <summary>
            Checks if the other object is also Nothing.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Nothing.GetHashCode">
            <summary>
            Always returns 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe`1.Nothing.ToString">
            <summary>
            Always returns the string "Nothing".
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Maybe">
            <summary>
            Provides factory and extension methods for the generic maybe class.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.Just``1(``0)">
            <summary>
            Creates a just value.
            Throws InvalidArgumentException if value = null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.Nothing``1">
            <summary>
            Creates an instance of Nothing.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.Select``2(WebChemistry.Framework.Core.Maybe{``0},System.Func{``0,``1})">
            <summary>
            This is to allow the LINQ syntax "from x in m select f(x)"
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="x"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.SelectMany``3(WebChemistry.Framework.Core.Maybe{``0},System.Func{``0,WebChemistry.Framework.Core.Maybe{``1}},System.Func{``0,``1,``2})">
            <summary>
            This is to allow the LINQ syntax "from x in m from y in n select f(x, y)"
            </summary>
            <typeparam name="TA"></typeparam>
            <typeparam name="TB"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.SelectMany``3(WebChemistry.Framework.Core.Maybe{``0},WebChemistry.Framework.Core.Maybe{``1},System.Func{``0,``1,``2})">
            <summary>
            Non-capturing select.
            </summary>
            <typeparam name="TA"></typeparam>
            <typeparam name="TB"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.Where``1(WebChemistry.Framework.Core.Maybe{``0},System.Func{``0,System.Boolean})">
            <summary>
            If the predicate is satisfied, returs value, otherwise returns Nothing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.IsNothing``1(WebChemistry.Framework.Core.Maybe{``0})">
            <summary>
            Checks if the value is Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.IsSomething``1(WebChemistry.Framework.Core.Maybe{``0})">
            <summary>
            Checks if the value is Just
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.GetValue``1(WebChemistry.Framework.Core.Maybe{``0})">
            <summary>
            Gets the inner value.
            Returns "default(T)" if Maybe is Nothing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.AsMaybe``1(``0)">
            <summary>
            Whaps an object in the maybe type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.AsMaybe``1(System.Nullable{``0})">
            <summary>
            Convertes nullable to maybe.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.Flatten``1(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Maybe{``0}})">
            <summary>
            Flatten "Just x"s
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.Do``1(WebChemistry.Framework.Core.Maybe{``0},System.Action{``0})">
            <summary>
            Performs an action if the value is "something".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="action"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.ToDouble(System.String)">
            <summary>
            Attempts to convert a string to double.
            Uses CultureInfo.InvariantCulture.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Maybe.ToInt(System.String)">
            <summary>
            Attempts to convert a string to int.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Json.Vector3DJsonConverter">
            <summary>
            Vector3D JSON converter
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Json.PdbResidueIdentifierJsonConverter">
            <summary>
            ResidueIdentifier converter.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Atom">
            <summary>
            Represents an atom.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Atom.Position">
            <summary>
            Gets or sets the atom position.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Atom.ElementSymbol">
            <summary>
            Gets the element symbol of the atom.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Atom.Id">
            <summary>
            Gets the id of the atom.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.#ctor(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Creates an instance of atom with a given id and element symbol.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.Equals(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Compares the Id's of both atoms.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.Equals(System.Object)">
            <summary>
            Calls Equals(IAtom)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.GetHashCode">
            <summary>
            Return the id of the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.CompareTo(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Compares atom Ids.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.CompareTo(System.Object)">
            <summary>
            Compares atom Ids.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.Clone">
            <summary>
            Creates a deep copy of the atoms. 
            Dynamic properties are shallow copies.
            </summary>
            <returns>A deep copy of the atom (dynamic properties are a shallow copy).</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Atom.Create(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Creates new instance of an atom.
            </summary>
            <param name="id"></param>
            <param name="symbol"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.AtomCollection">
            <summary>
            A read-only collection of atoms.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.AtomCollection.Empty">
            <summary>
            An empty collection of atoms.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomCollection.GetById(System.Int32)">
            <summary>
            Get atoms by IAtom.Id
            </summary>
            <param name="id">IAtom.Id of the atom</param>
            <returns>Atom with IAtom.Id <paramref name="id"/>.</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomCollection.TryGetAtom(System.Int32,WebChemistry.Framework.Core.IAtom@)">
            <summary>
            Try to retrieve an atom from the collection.
            </summary>
            <param name="id"></param>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomCollection.Contains(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Checks if there is an atom with the same Id in the collection.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomCollection.FromUniqueAtoms(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom})">
            <summary>
            Creates a collection of atoms. Only adds atoms with unique Id.
            Mostly useful for motive finder.
            </summary>
            <param name="atoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomCollection.#ctor(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom})">
            <summary>
            Creates a collection of atoms.
            </summary>
            <exception cref="T:WebChemistry.Framework.Core.NonUniqueAtomIdException">Thrown if trying to add 2 atoms with the same id.</exception>
            <param name="atoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomCollection.Create(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom})">
            <summary>
            Creates a new atom collection.
            </summary>
            <param name="atoms"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomEx.ToInvariantKDTree(WebChemistry.Framework.Core.IAtomCollection)">
            <summary>
            Converts the atom collection to a KDTree.
            The atoms are first randomly shuffled.
            </summary>
            <param name="atoms"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.AtomPropertiesEx">
            <summary>
            Atom properties
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.AtomPropertiesEx.DefaultExtension">
            <summary>
            Default extension (with dot).
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.GetAtomPropertyDescriptor(System.String)">
            <summary>
            Get a descriptor for a property with a given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.Read(System.IO.TextReader)">
            <summary>
            Read properties.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.WriteToString(WebChemistry.Framework.Core.AtomPropertiesBase)">
            <summary>
            Write the properties to a string.
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.GetAtomProperties(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Get properties.
            </summary>
            <param name="s"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.TryGetAtomProperties(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Try get atom properties.
            </summary>
            <param name="s"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.AttachAtomProperties(WebChemistry.Framework.Core.IStructure,WebChemistry.Framework.Core.AtomPropertiesBase)">
            <summary>
            Attach properties.
            </summary>
            <param name="s"></param>
            <param name="props"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.StealAtomProperties(WebChemistry.Framework.Core.IStructure,WebChemistry.Framework.Core.IStructure)">
            <summary>
            Steal properties from a different structure.
            </summary>
            <param name="s"></param>
            <param name="from"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesEx.RemoveAtomProperties(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Remove properties.
            </summary>
            <param name="s"></param>
            <param name="name"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.AtomPropertiesBase">
            <summary>
            Atom properties base.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AtomPropertiesBase.ParentId">
            <summary>
            Id of the parent.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AtomPropertiesBase.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AtomPropertiesBase.Tag">
            <summary>
            Property tag.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.GetRealValue(WebChemistry.Framework.Core.IAtom,System.Double)">
            <summary>
            Get real value.
            </summary>
            <param name="atom"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.TryGetValue(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Try to get the value.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.Write(System.IO.TextWriter)">
            <summary>
            Write the properties.
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.Read(System.IO.TextReader)">
            <summary>
            read the properties.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.WriteValues(System.IO.TextWriter)">
            <summary>
            Write the values.
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.ReadValues(System.IO.TextReader)">
            <summary>
            Read the values.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.Steal(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Steal the properties.
            </summary>
            <param name="culprit"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.Renamed(System.String)">
            <summary>
            Renamed.
            </summary>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomPropertiesBase.#ctor(System.String,System.String,System.String)">
            <summary>
            create the class.
            </summary>
            <param name="parentId"></param>
            <param name="name"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.RealAtomProperties">
            <summary>
            Real (double properties).
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.RealAtomProperties.Values">
            <summary>
            The actual values.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.GetRealValue(WebChemistry.Framework.Core.IAtom,System.Double)">
            <summary>
            Get the real value.
            </summary>
            <param name="atom"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.TryGetValue(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Try to get the value.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.Steal(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Steal it..
            </summary>
            <param name="culprit"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.Renamed(System.String)">
            <summary>
            Renamed.
            </summary>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.WriteValues(System.IO.TextWriter)">
            <summary>
            Write values
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.ReadValues(System.IO.TextReader)">
            <summary>
            Read the values.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.RealAtomProperties.Create(WebChemistry.Framework.Core.IStructure,System.String,System.String,System.Func{WebChemistry.Framework.Core.IAtom,System.Nullable{System.Double}})">
            <summary>
            Create the property set.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="tag"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.BondCollection">
            <summary>
            A read-only collection of bonds.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.BondCollection.Empty">
            <summary>
            An empty collection of bonds.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.BondCollection.Item(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Get bonds with <paramref name="a"/> as a starting point.
            For each bond, it always holds that IBond.A = a and IBond.B ~ the other atom.
            </summary>
            <param name="a"></param>
            <returns>All bonds that contain <paramref name="a"/>. For each of the bonds, it hold IBond.A = <paramref name="a"/>.</returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.BondCollection.Item(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Gets the bond between atoms <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Bond or null, if there is no bond.</returns>        
        </member>
        <member name="M:WebChemistry.Framework.Core.BondCollection.Contains(WebChemistry.Framework.Core.IBond)">
            <summary>
            Checks if the collection contains a bond.
            </summary>
            <param name="bond"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondCollection.Contains(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Checks if the collection contains a bond between 2 atoms.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondCollection.#ctor(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IBond})">
            <summary>
            Creates a collection of bonds.
            </summary>
            <param name="bonds"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondCollection.Create(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IBond})">
            <summary>
            Create a new bond collection.
            </summary>
            <param name="bonds"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.BondIdentifier">
            <summary>
            An unique bond identifier computed from atom identifiers.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.GetHashCode">
            <summary>
            Returns the hash code computed as a hash of a 64bit id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.Equals(WebChemistry.Framework.Core.BondIdentifier)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.op_Equality(WebChemistry.Framework.Core.BondIdentifier,WebChemistry.Framework.Core.BondIdentifier)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.op_Inequality(WebChemistry.Framework.Core.BondIdentifier,WebChemistry.Framework.Core.BondIdentifier)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.Get(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.BondIdentifier.#ctor(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Creates the identifier.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="P:WebChemistry.Framework.Core.ElementAndBondInfo.MetalAtomsList">
            <summary>
            A list of metal atoms.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementAndBondInfo.IsMetalSymbol(WebChemistry.Framework.Core.ElementSymbol)">
            <summary>
            determines if the element is a metal.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementAndBondInfo.ComputePdbBonds(WebChemistry.Framework.Core.IStructure,System.Collections.Generic.IList{WebChemistry.Framework.Core.IBond})">
            <summary>
            Computes bonds for a given structure.
            </summary>
            <param name="structure"></param>
            <param name="knownBonds"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementAndBondInfo.SerializeBonds(WebChemistry.Framework.Core.IStructure,System.IO.TextWriter)">
            <summary>
            Serializes bonds.
            Format:
            A.id
            B.id
            Type
            </summary>
            <param name="s"></param>
            <param name="writer"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementAndBondInfo.ReadBonds(WebChemistry.Framework.Core.IStructure,System.IO.TextReader)">
            <summary>
            Reads bonds from a stream.
            Format:
            A.id
            B.id
            Type
            </summary>
            <param name="structure"></param>
            <param name="reader"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.BondType">
            <summary>
            Bond types.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ChiralityAnalyzer.GetChiralAtoms(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Find chiral atoms (atoms with at least 3 neighbors that have all outgoing components different).
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.ElementColor">
            <summary>
            Represents RGB color.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.ElementColor.Default">
            <summary>
            Default color. Set to R = 128, G = 128, B = 128.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ElementColor.R">
            <summary>
            Gets the red component.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ElementColor.G">
            <summary>
            Gets the green component.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ElementColor.B">
            <summary>
            Gets the blue component.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementColor.ToString">
            <summary>
            Convers to a hex string: #RRGGBB
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create ...
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementColor.Parse(System.String)">
            <summary>
            Creates an instance of the class from hex string representation of the color.
            </summary>
            <param name="s">Hex string representation of the color. I.e. "#RRGGBB".</param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.ElementSymbol">
            <summary>
            Represents an element symbol.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ElementSymbol.CompareTo(WebChemistry.Framework.Core.ElementSymbol)">
            <summary>
            Uses SymbolString to compare the two symbols.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.ElementSymbols.All">
            <summary>
            All symbols. Does not include "Unknown".
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.IAtom">
            <summary>
            A base interface for representing atoms.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IAtom.Id">
            <summary>
            Returns a unique id of the atom. Read-only.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IAtom.ElementSymbol">
            <summary>
            Element symbol of the atom. Read-only.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IAtom.InvariantPosition">
            <summary>
            Immutable Position of the atom. Assigned when the atom was created.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IAtom.Position">
            <summary>
            Position of the atom. Mutable.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.IAtomCollection">
            <summary>
            A collection of atoms.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.IAtomCollection.GetById(System.Int32)">
            <summary>
            Returns an atom with a given id.
            Throws if the atom does not exist.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.IAtomCollection.TryGetAtom(System.Int32,WebChemistry.Framework.Core.IAtom@)">
            <summary>
            Try to retrieve an atom by id.
            </summary>
            <param name="id"></param>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.IAtomCollection.Item(System.Int32)">
            <summary>
            Return the i-th atom.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.IBond">
            <summary>
            A base interface for representing bonds.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBond.Id">
            <summary>
            Calculated from IDs of A and B as (i * 2^32) | j   // (i + j) * (i + j + 1) / 2 + j where i is the smaller id and j is the larger one.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBond.A">
            <summary>
            The first atom.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBond.B">
            <summary>
            The second atom.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBond.Type">
            <summary>
            Bond type.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.IBondCollection">
            <summary>
            A collection of bonds.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBondCollection.Item(System.Int32)">
            <summary>
            Return the i-th bond.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBondCollection.Item(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Returns all bonds corresponding to a given atom.
            It always holds that Bond.A = a and Bond.B = other atom.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.IBondCollection.Item(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Returns a bond between bond atoms.
            Null if the bond does not exist.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.IBondCollection.Contains(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Check whether the collection contains a bond between two atoms.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.IStructure">
            <summary>
            A base interface for representing structures (molecules).
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IStructure.Id">
            <summary>
            Gets the structure's is.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IStructure.Atoms">
            <summary>
            Gets atoms.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.IStructure.Bonds">
            <summary>
            Gets bonds.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.MdlMol.MdlMolStereoParity">
            <summary>
            Mol stereo parity.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.MdlMol.MdlMolAtom">
            <summary>
            A representation of the Mol2 atom record.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.MdlMol.MdlMolAtom.StereoParity">
            <summary>
            Stereo parity
            0 = not stereo
            1 = odd
            2 = even
            3 = both or unmarked
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.MdlMol.MdlMolAtom.Clone">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.MdlMol.MdlMolAtom.CloneWith(WebChemistry.Framework.Core.IAtom,System.Nullable{System.Int32},System.Nullable{WebChemistry.Framework.Core.ElementSymbol},WebChemistry.Framework.Core.MdlMol.MdlMolStereoParity)">
            <summary>
            Clone the atom with alternate PDB properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.MdlMol.MdlMolAtom.#ctor(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Create a new instance of the atom.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="partialCharge"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.MdlMol.MdlMolAtom.Create(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Core.MdlMol.MdlMolStereoParity,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Creates an instance of a Mol2 atom.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="partialCharge"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.MolEx">
            <summary>
            Extensions for Mol format.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.MolEx.MolStereoParity(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Get the stereo parity.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Mol2Atom">
            <summary>
            A representation of the Mol2 atom record.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Mol2Atom.AtomType">
            <summary>
            Mol 2 atom type.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Mol2Atom.Name">
            <summary>
            Atom name.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Mol2Atom.PartialCharge">
            <summary>
            Partail Charge [double]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Mol2Atom.ResidueIdentifier">
            <summary>
            Residue identifier.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Mol2Atom.ResidueName">
            <summary>
            residue name.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Atom.Clone">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Atom.CloneWith(WebChemistry.Framework.Core.IAtom,System.Nullable{System.Int32},System.Nullable{WebChemistry.Framework.Core.ElementSymbol},System.String,System.String,System.Nullable{WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier},System.String,System.Nullable{System.Double})">
            <summary>
            Clone the atom with alternate properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Atom.#ctor(System.Int32,WebChemistry.Framework.Core.ElementSymbol,System.String,System.String,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Create a new instance of the atom.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="elementSymbol"></param>
            <param name="partialCharge"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Atom.Create(System.Int32,WebChemistry.Framework.Core.ElementSymbol,System.String,System.String,System.Nullable{WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier},System.String,System.Double,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Creates an instance of a Mol2 atom.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="partialCharge"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Mol2Ex">
            <summary>
            Extensions for Mol2 format.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Ex.Mol2ContainsCharges(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Checks if the stucture contains Mol2 charges.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Ex.IsMol2(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Determines if this is a mol2 structure.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Mol2Ex.Mol2PartialCharge(WebChemistry.Framework.Core.IAtom)">
            <summary>
            MOL2 partial atom charge.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.PdbQt.PdbQtAtom">
            <summary>
            A representation of the PDBQt atom record.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.PdbQt.PdbQtAtom.PartialCharge">
            <summary>
            Partial atom charge.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbQt.PdbQtAtom.Clone">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbQt.PdbQtAtom.CloneWith(WebChemistry.Framework.Core.IAtom,System.Nullable{System.Int32},System.Nullable{WebChemistry.Framework.Core.ElementSymbol},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Char},System.String,System.Nullable{System.Char},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Clone the atom with alternate PDB properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbQt.PdbQtAtom.#ctor(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbQt.PdbQtAtom.Create(System.Int32,WebChemistry.Framework.Core.ElementSymbol,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Char,System.String,System.Char,System.Double,System.Double,System.String,System.String,System.Double,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Creates an instance of a PDBAtom.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="name"></param>
            <param name="recordName"></param>
            <param name="serialNumber"></param>
            <param name="residueName"></param>
            <param name="residueSequenceNumber"></param>
            <param name="insertionResidueCode"></param>
            <param name="chainIdentifier"></param>
            <param name="alternateLocationIdentifier"></param>
            <param name="occupancy"></param>
            <param name="temperatureFactor"></param>
            <param name="segmentIdentifier"></param>
            <param name="charge"></param>
            <param name="position"></param>
            <param name="partialCharge"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.PdbQtEx">
            <summary>
            PdbQt structure extensions.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbQtEx.PdbQtCharge(WebChemistry.Framework.Core.IAtom)">
            <summary>
            PDBQt atom charge.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbAtom">
            <summary>
            A representation of the PDB atom record.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.Name">
            <summary>
            PDB name [string]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.RecordName">
            <summary>
            PDB record name [string]. Usually ATOM or HETATM.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.SerialNumber">
            <summary>
            PDB residue name [int]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.EntityId">
            <summary>
            Entity Id [int]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.ResidueName">
            <summary>
            PDB residue name [string]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.ResidueSequenceNumber">
            <summary>
            PDB residue sequence number [int]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.InsertionResidueCode">
            <summary>
            PDB insertion residue code [char]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.ChainIdentifier">
            <summary>
            PDB chain identifier [string]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.AlternateLocaltionIdentifier">
            <summary>
            PDB alternate location identifier [char]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.Occupancy">
            <summary>
            PDB occupancy / PQR Charge [double]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.TemperatureFactor">
            <summary>
            PDB temperature factor / PQR Radius [double]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.SegmentIdentifier">
            <summary>
            PDB segment identifier [string]
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbAtom.Charge">
            <summary>
            PDB charge [string]
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbAtom.Clone">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbAtom.CloneWith(WebChemistry.Framework.Core.IAtom,System.Nullable{System.Int32},System.Nullable{WebChemistry.Framework.Core.ElementSymbol},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Char},System.String,System.Nullable{System.Char},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Clone the atom with alternate PDB properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbAtom.#ctor(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="invariantPosition"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbAtom.Create(System.Int32,WebChemistry.Framework.Core.ElementSymbol,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Char,System.String,System.Char,System.Double,System.Double,System.String,System.String,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Creates an instance of a PDBAtom.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="name"></param>
            <param name="entityId"></param>
            <param name="recordName"></param>
            <param name="serialNumber"></param>
            <param name="residueName"></param>
            <param name="residueSequenceNumber"></param>
            <param name="insertionResidueCode"></param>
            <param name="chainIdentifier"></param>
            <param name="alternateLocationIdentifier"></param>
            <param name="occupancy"></param>
            <param name="temperatureFactor"></param>
            <param name="segmentIdentifier"></param>
            <param name="charge"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbBackbone">
            <summary>
            Represents a C-alpha backbone of a protein.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.PdbBackbone.Empty">
            <summary>
            Empty backbone.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbBackbone.ProteinBackbone">
            <summary>
            The protein backbone.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbBackbone.DnaBackbone">
            <summary>
            The DNA backbone.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbBackbone.Create(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Create the backbone.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.AtomChiralityRS">
            <summary>
            Determine the atom chirality (R = right handed, S = left handed)
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbCompAtom">
            <summary>
            A representation of the PDB atom record.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbCompAtom.ModelPosition">
            <summary>
            The model coordinates.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbCompAtom.IdealPosition">
            <summary>
            The ideal coordinates.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbCompAtom.Chirality">
            <summary>
            Determines if the atom is chiral or not.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbCompAtom.Clone">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbCompAtom.ToModelAtom">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbCompAtom.ToIdealAtom">
            <summary>
            Clone the atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbCompAtom.CloneWith(WebChemistry.Framework.Core.IAtom,System.Nullable{System.Int32},System.Nullable{WebChemistry.Framework.Core.ElementSymbol},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Char},System.String,System.Nullable{System.Char},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{WebChemistry.Framework.Math.Vector3D},System.Nullable{WebChemistry.Framework.Core.Pdb.AtomChiralityRS},System.Nullable{WebChemistry.Framework.Math.Vector3D},System.Nullable{WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Clone the atom with alternate PDB properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbCompAtom.#ctor(System.Int32,WebChemistry.Framework.Core.ElementSymbol,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="invariantPosition"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbCompAtom.Create(System.Int32,WebChemistry.Framework.Core.ElementSymbol,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Char,System.String,System.Char,System.Double,System.Double,System.String,System.String,WebChemistry.Framework.Math.Vector3D,WebChemistry.Framework.Core.Pdb.AtomChiralityRS,System.Nullable{WebChemistry.Framework.Math.Vector3D},System.Nullable{WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Creates an instance of a PDBAtom.
            </summary>
            <param name="id"></param>
            <param name="elementSymbol"></param>
            <param name="name"></param>
            <param name="entityId"></param>
            <param name="recordName"></param>
            <param name="serialNumber"></param>
            <param name="residueName"></param>
            <param name="residueSequenceNumber"></param>
            <param name="insertionResidueCode"></param>
            <param name="chainIdentifier"></param>
            <param name="alternateLocationIdentifier"></param>
            <param name="occupancy"></param>
            <param name="temperatureFactor"></param>
            <param name="segmentIdentifier"></param>
            <param name="charge"></param>
            <param name="position"></param>
            <param name="chirality"></param>
            <param name="idealPosition"></param>
            <param name="modelPosition"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbEntityType">
            <summary>
            Entity types.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbEntitySource">
            <summary>
            Pdb entity types.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbStoichiometryType">
            <summary>
            Stoichiometry types for protein chains
            Monomer - single chain
            Homomer - multiple chains of the same sequence
            Heteromer - multiple chains with different sequences
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbPolymerType">
            <summary>
            Enumeration of PDB content as stated in files
            
            Protein - polypeptide(L), polypeptide(D)
            DNA - polydeoxyribonucleotide
            RNA - polyribonucleotide
            + their combinations
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbEntityBase">
            <summary>
            Base class for PDB entity info.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbEntityBase.EntityId">
            <summary>
            Unique integer identifier of the entity.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbOrganismData.Name">
            <summary>
            Name of the organism.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbOrganismData.TaxonomyId">
            <summary>
            Ncbi Taxonomy Identifier
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbOrganismData.Genus">
            <summary>
            Genus.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbOrganismData.HostName">
            <summary>
            Host name.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbOrganismData.HostTaxonomyId">
            <summary>
            Host taxonomy identifier.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbOrganismData.HostGenus">
            <summary>
            Genus of the host.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbEntityData">
            <summary>
            Data about entities in a single PDB(x) file.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbEntityData.EcNumber">
            <summary>
            Ex number.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbEntityData.WeightInKda">
            <summary>
            Weight of the entity in kDa.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbEntityData.NumberOfMolecules">
            <summary>
            The number of molecules.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbEntityData.Source">
            <summary>
            Source of the entity.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbEntityData.Type">
            <summary>
            Entity type.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbMetadata">
            <summary>
            PDB Metadata
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.Resolution">
            <summary>
            Resolution in angstroms.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.Keywords">
            <summary>
            Keywords.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.Authors">
            <summary>
            Authors.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.Released">
            <summary>
            Released data.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.LatestRevision">
            <summary>
            Latest revision of the structure.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.ExperimentMethod">
            <summary>
            Method of structure determination
            Current values:
            
            X-RAY DIFFRACTION
            SOLUTION NMR
            ELECTRON MICROSCOPY
            NEUTRON DIFFRACTION
            ELECTRON CRYSTALLOGRAPHY
            SOLUTION SCATTERING
            FIBER DIFFRACTION
            FLUORESCENCE TRANSFER
            SOLID-STATE NMR
            POWDER DIFFRACTION
            INFRARED SPECTROSCOPY
            
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.TotalWeightInKda">
            <summary>
            Weight of all entities (Molecular weight of all non-water atoms in the asymmetric unit)
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.EntitySources">
            <summary>
            Determines whether the structure was isolated from a natural resource, from GMO or 
            synthesized Ab initio
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.OriginOrganisms">
            <summary>
            Name of the organism the structure come from
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.OriginOrganismsId">
            <summary>
            Taxonomy ID of the organism according to the NCBI http://www.ncbi.nlm.nih.gov/taxonomy
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.OriginOrganismsGenus">
            <summary>
            Taxonomy ID of the organism genus the structure was cultivated in
            according to the NCBI http://www.ncbi.nlm.nih.gov/taxonomy
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.HostOrganisms">
            <summary>
            Name of the organism structure was cultivated in
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.HostOrganismsId">
            <summary>
            Taxonomy ID of the organism the structure was cultivated in
            according to the NCBI http://www.ncbi.nlm.nih.gov/taxonomy
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.HostOrganismsGenus">
            <summary>
            Name of the organism genus
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.EcNumbers">
            <summary>
            Enzymatic Commission number assigned to this particular structure
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.PolymerType">
            <summary>
            Type of a polymers the structure composes of
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.ProteinStoichiometryString">
            <summary>
            Returns a stoichiometry string specifying the composition of the polypeptides in the structure
            A == StoichiometryType.Monomer
            A2, A10, etc. == StoichiometryType.Homomer
            AB A2B2, A3B2, etc. referes to a StoichiometryType.Heteromer
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.ProteinStoichiometry">
            <summary>
            Determines a type of structure based on the ProteinStoichiometry string
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.EntityIdentifiers">
            <summary>
            Entity identifiers.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.EntityDataById">
            <summary>
            Data for entities by identifier (keys correspond to EntityIdentifiers)
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.OrganismDataByEntityId">
            <summary>
            Data about organisms. The data need not be present for each entity.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbMetadata.PolymerTypeDataByEntityId">
            <summary>
            Polymer types. Need not be present for each entity.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbMetadata.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.CreateStructure(System.Collections.Generic.List{WebChemistry.Framework.Core.Pdb.PdbAtom},System.Boolean)">
            <summary>
            Creates a structure from the provided atoms.
            </summary>
            <param name="atoms"></param>
            <param name="removeCloseResidues"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.CreateSecondaryElements(WebChemistry.Framework.Core.IStructure,WebChemistry.Framework.Core.Pdb.PdbResidueCollection)">
            <summary>
            Creates secondary elements from the SecondaryElements list.
            </summary>
            <param name="structure"></param>
            <param name="residues"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.NextLine">
            <summary>
            Reads the next line in the input stream and stores the value to the CurrentLineText variable.
            Increments the CurrentLine counter.
            </summary>
            <returns>True if the stream did not end, false otherwise.</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.StartsWith(System.Char)">
            <summary>
            Checks if the current line starts with a given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.StartsWith(System.String)">
            <summary>
            Checks if the current line starts with a given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.StartWithIgnoreCase(System.String)">
            <summary>
            Checks if the line starts with a given value, ignoring case.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbReader.RecordTypeInfo">
            <summary>
            Represents a record info.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.GetRecordType">
            <summary>
            Used to determine the record type from the first line of a section (either loop_ or a single record).
            
            "Unknown" sections are skipped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.ReadLoopFields">
            <summary>
            Reads the fields contained in a loop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.ReadLoopElements``1(System.Action{``0})">
            <summary>
            Wrapper procedure for reading loop fields.
            </summary>
            <typeparam name="TFields"></typeparam>
            <param name="action"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.ReadLoopElements``2(``0,System.Action{``0,``1})">
            <summary>
            Wrapper procedure for reading loop fields that require state.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="state"></param>
            <param name="action"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.CollectionLoop``2(System.Collections.Generic.ICollection{``0},``1)">
            <summary>
            A loop reader that stored each element to a collection.
            </summary>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="list"></param>
            <param name="fields"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.ReadLoopElementsToList``2">
            <summary>
            Reads the loop elements to a list.
            </summary>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TFields"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.SkipSection">
            <summary>
            Skips the current section by finding a # that is not inside a text block.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.HandleLoop">
            <summary>
            Handles the loop records.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.HandleSingleRecord">
            <summary>
            Handles the non-loop records.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.ReadPdbX">
            <summary>
            Reads a PDBx/mmCIF file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.CreateCompStructure">
            <summary>
            Creates a component structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.TokenizeLoopElementOrFail(System.Int32)">
            <summary>
            Reads LoopFieldCount number of tokens from the input.
            </summary>
            <param name="tokenIndex"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.AddFieldTokenToBuffer(System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Assigns the current token to the LoopFields buffer.
            </summary>
            <param name="index"></param>
            <param name="text"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="escaped"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbReader.TokenizeCurrentLine(System.Int32)">
            <summary>
            Tokenize the current line.
            </summary>
            <param name="tokenIndex"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.SecondaryStructureType">
            <summary>
            Residue secondary structure type.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.SecondaryStructureType.Unknown">
            <summary>
            Not known.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.SecondaryStructureType.Sheet">
            <summary>
            Sheet
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.SecondaryStructureType.Helix">
            <summary>
            Helix
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.ResidueChargeType">
            <summary>
            Charge info taken from 
            Textbook of Structural Biology
            A. Liljas, L Lijas, J Piskur, G Lindblom, O Nissen, M Kjeldgaard
            Chapter 2.1.1, Figure 2.2 (page 13)
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier">
            <summary>
            An unique residue identifier.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.Number">
            <summary>
            PDB ResidueSerialNumber.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.ChainIdentifier">
            <summary>
            Chain the residue is on.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.InsertionResidueCode">
            <summary>
            Insertion residue code.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.GetHashCode">
            <summary>
            Returns the hash code computed as a hash of a 64bit id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.Equals(WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.op_Equality(WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier,WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.op_Inequality(WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier,WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.FromAtom(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Creates the identifier from atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.Create(System.Int32,System.String,System.Char)">
            <summary>
            Create a new identifier.
            </summary>
            <param name="sequenceNumber"></param>
            <param name="chainId"></param>
            <param name="insertionResidueCode"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.Parse(System.String)">
            <summary>
            Parse the identifier from a value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.#ctor(System.Int32,System.String,System.Char)">
            <summary>
            Creates the identifier.
            </summary>
            <param name="sequenceNumber"></param>
            <param name="chainId"></param>
            <param name="insertionResidueCode"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.CompareTo(WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier)">
            <summary>
            Compare the IDs lexicographically based on (Chain, Number, InsertionResidueCode)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier.CompareTo(System.Object)">
            <summary>
            Compares identifiers.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbResidue">
            <summary>
            PDB residue.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.Atoms">
            <summary>
            Atoms the residue consists of.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.Name">
            <summary>
            Name of the residue.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.Number">
            <summary>
            PDB ResidueSerialNumber.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.ChainIdentifier">
            <summary>
            Chain the residue is on.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.InsertionResidueCode">
            <summary>
            Insertion residue code.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.Identifier">
            <summary>
            Gets unique identifier of the form ChainID left 24 | ResId
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.SecondaryType">
            <summary>
            Secondary structure type.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.ModifiedFrom">
            <summary>
            The parent residue name. Null or empty if not applicable.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.IsModified">
            <summary>
            Was the residue modified?
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.ToString">
            <summary>
            Returns a string of the form "name id"
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{WebChemistry.Framework.Core.IAtom})">
            <summary>
            Creates a residue from atoms and structure.
            </summary>
            <param name="atoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.Create(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom})">
            <summary>
            Create the residue.
            </summary>
            <param name="atoms"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.Distance(WebChemistry.Framework.Core.Pdb.PdbResidue,WebChemistry.Framework.Core.Pdb.PdbResidue)">
            <summary>
            Gets the distance of the closest atoms.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.OnSelectedChanged">
            <summary>
            Select every atom on the residue.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.OnHighlightedChanged">
            <summary>
            Highlight every atom on the residue.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.Equals(WebChemistry.Framework.Core.Pdb.PdbResidue)">
            <summary>
            Check the equality using identifiers.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.GetCarbonylOxygen">
            <summary>
            Gets the carbonyl oxygen is there is one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.GetCAlpha">
            <summary>
            Gets the C-alpha atom if there is one.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.IsAmino">
            <summary>
            Checks if the residue is an amino acid.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.IsNucleotide">
            <summary>
            Checks if the residue is a nucleotide.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.IsWaterName(System.String)">
            <summary>
            HOH, SOL, WAT
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.AminoNamesList">
            <summary>
            The list of amino names.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.NucleotideNamesList">
            <summary>
            The list of nucleotide names.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.ChargeType">
            <summary>
            From http://sbrs.cm.utexas.edu/WS/aa.pdf
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.GetChargeType(System.String)">
            <summary>
            From http://sbrs.cm.utexas.edu/WS/aa.pdf
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.IsAminoName(System.String)">
            <summary>
            Checks if the name is an amino acid.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.IsNucleotideName(System.String)">
            <summary>
            Check if the residue is a nucleotide.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.GetShortAminoName(System.String)">
            <summary>
            Gets short amino name. If the residue is not an amino acid, returns the original name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.GetShortNucleotideName(System.String)">
            <summary>
            Gets short nucleotide name. If the residue is not a nucleotide, returns the original name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidue.ShortName">
            <summary>
            Single letter name of the AminoAcid. If not amino acid, the 1st letter.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.Compare(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Compares two atom residue identifiers (-1 -> a is smaller than b, 0 -> equal, 1 -> a is greater than b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.CompareTo(WebChemistry.Framework.Core.Pdb.PdbResidue)">
            <summary>
            Compares the residue identifiers.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidue.CompareTo(System.Object)">
            <summary>
            Compares the residue identifiers.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.ResidueStringType">
            <summary>
            Type of the residue string.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbResidueCollection">
            <summary>
            Collection of residues.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.Empty">
            <summary>
            A collection containing no residues.
            </summary>
        </member>
        <member name="E:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.SelectionChanged">
            <summary>
            Selection changed event.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.UniqueResidueNames">
            <summary>
            Set of unique residues.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.ResidueCounts">
            <summary>
            Residue counts.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.ResidueString">
            <summary>
            String of the form ("Name" "Number" "Chain")*
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.ShortResidueString">
            <summary>
            One letter abbreviations "ABC"
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.OrderedCondensedResidueString">
            <summary>
            Ordered residue names (X-Y-Z)
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.CountedResidueString">
            <summary>
            Example: CYS*2-HIS*2
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.CountedShortAminoNamesString">
            <summary>
            Example: 1xDMU-2xW-1xT
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.GetResidueString(WebChemistry.Framework.Core.Pdb.ResidueStringType)">
            <summary>
            Concatenates the residue identifiers into a string.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.FromAtom(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Return a residue from an atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.FromIdentifier(WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier)">
            <summary>
            Get a residue from identifier.
            Returns null if the residue is not present.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.ContainsResidueName(System.String)">
            <summary>
            Check if the collections contains a residue with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.GetCountedResidueString(System.Collections.Generic.IDictionary{System.String,System.Int32},System.String)">
            <summary>
            Returns the counted residue string: DMU*2-ASP*3-ASN
            </summary>
            <param name="counts"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.GetExplicitlyCountedResidueString(System.Collections.Generic.IDictionary{System.String,System.Int32},System.String)" -->
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.GetCountedShortAminoNamesString(System.Collections.Generic.IDictionary{System.String,System.Int32},System.String)">
            <summary>
            Returns the counted residue string: DMU*2-A*3-R*5
            </summary>
            <param name="counts"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.GetIdentifierString(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Pdb.PdbResidue},System.String)">
            <summary>
            Residue identifiers separated by -.
            </summary>
            <param name="residues"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.#ctor(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Pdb.PdbResidue})">
            <summary>
            Creates new residue collection.
            </summary>
            <param name="residues"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbResidueCollection.Create(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Pdb.PdbResidue})">
            <summary>
            Create the residue collection.
            </summary>
            <param name="residues"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbSecondaryElement">
            <summary>
            SEcondary structure element (sheet/helix)
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbSecondaryElement.Residues">
            <summary>
            All the residues.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbSecondaryElement.StartResidue">
            <summary>
            The first residue.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Pdb.PdbSecondaryElement.EndResidue">
            <summary>
            The last residue.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbHelix">
            <summary>
            A helix.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbSheet">
            <summary>
            A sheet.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbChain">
            <summary>
            Chain.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Pdb.PdbStructure">
            <summary>
            Pdb structure properties and stuff.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbStructure.AsPdbStructure(WebChemistry.Framework.Core.IStructure,System.Collections.Generic.IList{WebChemistry.Framework.Core.Pdb.PdbResidue})">
            <summary>
            Modifies the current structure to become a PDB structure.
            </summary>
            <param name="structure"></param>
            <param name="modifiedResidues">can be null</param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbStructure.ClonePdb(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Clone a PDB structure.
            </summary>
            <param name="source"></param>
            <param name="newId"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Pdb.PdbStructure.CloneWithChains(WebChemistry.Framework.Core.IStructure,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a deep copy of the structure containing only the listed chains.
            Coordinates are preserved.
            </summary>
            <param name="source"></param>
            <param name="chains"></param>
            <param name="newId"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.PdbEx">
            <summary>
            Pdb structure extensions.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsCAlpha(WebChemistry.Framework.Core.IAtom)">
            <summary>
            C alpha by any chance?
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsWater(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Is this a water atom?
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsHetAtom(WebChemistry.Framework.Core.IAtom)">
            <summary>
            HETATM || !AminoName (20 AKM)
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsHetAtomStrict(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Sctricly HETATM.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsBackboneAtom(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Determines whether the atom is an Amino or DNA/RNA backbone atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.ResidueIdentifier(WebChemistry.Framework.Core.IAtom)">
            <summary>
            PDB residues are uniquely identified by chain identifier and seq. number.
            </summary>
            <param name="atom"></param>
            <returns>  </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.ResidueString(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Residue string Name Number Chain
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbChainIdentifier(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Chain id.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbEntityId(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Get the entity identifier. Default id 1 for non PDB atoms.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbInsertionResidueCode(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Insertion code.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbAlternateLocationIdentifier(WebChemistry.Framework.Core.IAtom)">
            <summary>
            ALt loc.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbOccupancy(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Occupancy of the atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbTemperatureFactor(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Temp factor.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbResidueSequenceNumber(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Residues seq. number. FOr non PDB atoms, returns 0.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbResidueName(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Residue name. For non PDB atoms, returns UNK
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbName(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Name. If the atom is not PDB, return ElementSymbol.ToString.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbRecordName(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Record name. If the atom is not PDB, return "HETATM"
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbCharge(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Pdb charge - another useless crap.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbSegmentIdentifier(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Segment identifier. Whatever that is.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbSerialNumber(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Serial number of the atom. If this is not a PDB atom, the serial number is == atom.Id
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbMetadata(WebChemistry.Framework.Core.IStructure)">
            <summary>
            PDB Metadata.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsPdbStructure(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Is this a PDB structure?
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsPdbComponentStructure(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Determines if the structure is a PDB component structure.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PqrContainsCharges(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Is this a PRQ structure?
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbBackbone(WebChemistry.Framework.Core.IStructure)">
            <summary>
            The spine.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbResidues(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Residues in the protein.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbModifiedResidues(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Get the list of modified residues.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbChains(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Chains.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbHelices(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Helices.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbSheets(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Sheets.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PqrCharge(WebChemistry.Framework.Core.IAtom)">
            <summary>
            PQR File format charge.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PqrRadius(WebChemistry.Framework.Core.IAtom)">
            <summary>
            PQR File format charge.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbCompAtomChirality(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Chirality of PDB comp atom. If not PdbCompAtom, None is returned.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbCompAtomModelPosition(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Model atom position of the atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.PdbCompAtomIdealPosition(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Model atom position of the atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsValidComponentModel(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Check if the structure is a valid component with model coordinates.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.IsValidComponentIdeal(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Check if the structure is a valid component with ideal coordinates.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.GetComponentModelStructure(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Get the component with model coordiantes.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbEx.GetComponentIdealStructure(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Get the component with model coordiantes.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Ring.GetFingerprint``1(``0[],System.Func{``0,System.String})">
            <summary>
            Computes a ring fingerprint from a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements"></param>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Ring.GetFingerprint(WebChemistry.Framework.Core.IAtom[],WebChemistry.Framework.Core.IBondCollection)">
            <summary>
            Reorders the atoms!!
            </summary>
            <param name="orderedAtoms"></param>
            <param name="bonds"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Ring.GetHashCode">
            <summary>
            return the hash code of this ring.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Ring.Equals(System.Object)">
            <summary>
            Checks if two rings are identical (including atom Ids).
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Ring.ToString">
            <summary>
            Fingerprint string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Ring.Fingerprint">
            <summary>
            Fingerprint - concatenated atoms ordered by element symbol string.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Ring.Atoms">
            <summary>
            Atoms. Ordered by identifier symbol.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Ring.Create(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom},WebChemistry.Framework.Core.IBondCollection)">
            <summary>
            Create a ring from atoms.
            </summary>
            <param name="atoms"></param>
            <param name="bonds"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.RingCollection">
            <summary>
            Represents a collection of simple rings inside a structure.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.RingCollection.GetRingsByFingerprint(System.String)">
            <summary>
            Rings with a particular fingerprint.
            </summary>
            <param name="fingerprint"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RingCollection.ContainsFingerprint(System.String)">
            <summary>
            Checks if the structure contains a ring with a given fingerprint.
            </summary>
            <param name="fingerprint"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RingCollection.#ctor(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Ring})">
            <summary>
            Creates a ring collection.
            </summary>
            <param name="rings"></param>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.Atom">
            <summary>
            The atom this node wraps.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.TreePrevious">
            <summary>
            Previous node in the rooted spanning tree.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.SearchPrevious">
            <summary>
            Previous node in the breadth-first priority search for tagged node.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.CyclePrevious">
            <summary>
            Sorted list of "tree-previous" nodes. Built incrementally as the cycles are computed.
            Sorted asceding by Depth.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.Depth">
            <summary>
            Depth in the spanning tree.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.SearchDepth">
            <summary>
            Depth in the tagged node search.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.Tag">
            <summary>
            Tag. Used to identify cycles.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.RingCollection.AtomInfo.ListNode">
            <summary>
            Linked list node - useful to find spanning tree of all components.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.RingCollection.AtomInfo.InsertPrevious(WebChemistry.Framework.Core.RingCollection.AtomInfo)">
            <summary>
            Insert a node to a correct position in the previous list.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.RingCollection.FindTag(WebChemistry.Framework.Core.RingCollection.AtomInfo,WebChemistry.Framework.Core.RingCollection.AtomInfo,System.Int32,System.Int32)">
            <summary>
            Atom depth priority based search of a tagged atom.
            </summary>
            <param name="start"></param>
            <param name="tag"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.RingCollection.Create(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Find all rings of length ~8 and lower.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Structure">
            <summary>
            Represents a molecular structure.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Structure.Id">
            <summary>
            The ID of the structure.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Structure.Atoms">
            <summary>
            Atoms.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Structure.Bonds">
            <summary>
            Bonds.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Structure.#ctor(System.String,WebChemistry.Framework.Core.IAtomCollection,WebChemistry.Framework.Core.IBondCollection)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="atoms"></param>
            <param name="bonds"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Structure.#ctor(System.String,WebChemistry.Framework.Core.IAtomCollection)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="atoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Structure.ToString">
            <summary>
            Returns a string in the form "Structure (id, atoms: count, bonds: count)"
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Structure.Clone">
            <summary>
            Clones the struture.
            Only creates a shallow copy of the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Structure.Create(System.String,WebChemistry.Framework.Core.IAtomCollection)">
            <summary>
            Creates a new generic structure.
            </summary>
            <param name="id"></param>
            <param name="atoms"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Structure.Create(System.String,WebChemistry.Framework.Core.IAtomCollection,WebChemistry.Framework.Core.IBondCollection)">
            <summary>
            Creates a new generic structure.
            </summary>
            <param name="id"></param>
            <param name="atoms"></param>
            <param name="bonds"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructurePropertiesEx">
            <summary>
            Atom properties
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructurePropertiesEx.Descriptors(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Get properties.
            </summary>
            <param name="s"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureDescriptors">
            <summary>
            Atom properties base.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.StructureDescriptors.Item(System.String)">
            <summary>
            Indexor.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureDescriptors.TryGetDescriptor(System.String)">
            <summary>
            Try to get the descriptor.
            Null if the property does not exist.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureDescriptors.TryGetDescriptor``1(System.String)">
            <summary>
            Try get the descriptor ....
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureDescriptors.RemoveDescriptor(System.String)">
            <summary>
            Remove...
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureDescriptors.#ctor">
            <summary>
            create the class.
            </summary>
            <param name="parentId"></param>
            <param name="name"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureExtensions">
            <summary>
            Extensions for IStructure.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.WithoutHydrogens(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Returns a new structure without hydrogen atoms.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.InducedSubstructure(WebChemistry.Framework.Core.IStructure,System.String,System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom},System.Boolean)">
            <summary>
            Created a substructure induced by the atoms. Does not clone structure properties.
            Conserves "incudeAtomOrder".
            </summary>
            <param name="structure"></param>
            <param name="orderedAtomSet"></param>
            <param name="cloneAtoms"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.AsPdbStructure(WebChemistry.Framework.Core.IStructure,System.Collections.Generic.IList{WebChemistry.Framework.Core.Pdb.PdbResidue})">
            <summary>
            If the structure is not a PDB structure, convert it to one.
            </summary>
            <param name="structure"></param>
            <param name="modifiedResidues"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.GetAtomNeighbors(WebChemistry.Framework.Core.IStructure,WebChemistry.Framework.Core.IAtom)">
            <summary>
            Returns the neighbors of a particular atom.
            </summary>
            <param name="s"></param>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.ExpandSelection(WebChemistry.Framework.Core.IStructure,System.Int32)">
            <summary>
            Expands the selection by n levels.
            </summary>
            <param name="s"></param>
            <param name="levels"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.SelectAllAtoms(WebChemistry.Framework.Core.IStructure,System.Boolean)">
            <summary>
            Sets atom selection.
            </summary>
            <param name="s"></param>
            <param name="isSelected"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.GeometricalCenterAndRadius(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Computes geometrical center of the structure.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.ToCentroidCoordinates(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Makes the geometrical center the origin and returns the molecule radius.
            </summary>
            <param name="structure"></param>
            <returns>Radius of the molecule and the coordinates of the center</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.TransformAtomPositions(WebChemistry.Framework.Core.IStructure,System.Func{WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Translates the structure by the given vector.
            </summary>
            <param name="structure"></param>
            <param name="by"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.InvariantKdAtomTree(WebChemistry.Framework.Core.IStructure)">
            <summary>
            3D kD-Tree of atom centers. Lazy.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.HasInvariantKdAtomTree(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Checks if the tree was created.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.ChiralAtoms(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Get all chiral atoms.
            </summary>
            <param name="structure"></param>
            <returns></returns>        
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.Rings(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Collection of rings of length 8 or lower.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.WriteBonds(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Write bonds to a file.
            </summary>
            <param name="s"></param>
            <param name="filename"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureExtensions.ReadBonds(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Read bonds from a file.
            </summary>
            <param name="s"></param>
            <param name="filename"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureReaderType">
            <summary>
            Determines the type of the structure that needs to be parsed.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureReaderResult">
            <summary>
            Result of the read operation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.StructureReaderResult.Filename">
            <summary>
            The filename.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.StructureReaderResult.Structure">
            <summary>
            The structure.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.StructureReaderResult.Warnings">
            <summary>
            Warnings produced during the loading.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReaderResult.Success(System.String,WebChemistry.Framework.Core.IStructure,System.Collections.Generic.IList{WebChemistry.Framework.Core.StructureReaderWarning})">
            <summary>
            Successfully loaded structure.
            </summary>
            <param name="filename"></param>
            <param name="structure"></param>
            <param name="warnings"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.PdbReaderParams">
            <summary>
            PDB reader parameters.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.PdbReaderParams.Id">
            <summary>
            Id of the structure.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.PdbReaderParams.LoadFirstModelOnly">
            <summary>
            Loads only the first model. Default is true.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.PdbReaderParams.Type">
            <summary>
            Is this the PQR format?
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.PdbReaderParams.#ctor">
            <summary>
            Default params.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureReader">
            <summary>
            The mighty reader.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureReader.SupportedExtensions">
            <summary>
            Supported extensions (".ext" format).
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.IsStructureFilename(System.String)">
            <summary>
            Determines whether the filename is a supported file type.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.GetStructureType(System.String)">
            <summary>
            Return a structure type from filename.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.GetStructureIdFromFilename(System.String)">
            <summary>
            The file name without extension.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.GetStructureIdFromFileInfo(System.IO.FileInfo)">
            <summary>
            The file name without extension.
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.Read(System.String,System.String,WebChemistry.Framework.Core.StructureReaderType)">
            <summary>
            Read a structure from a file.
            </summary>
            <param name="filename"></param>
            <param name="customId"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.TryRead(System.String,System.String,WebChemistry.Framework.Core.StructureReaderType)">
            <summary>
            Read a structure from a file.
            </summary>
            <param name="filename"></param>
            <param name="customId"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.Read(System.String,System.Func{System.IO.Stream},System.String,WebChemistry.Framework.Core.StructureReaderType)">
            <summary>
            Read a structure from the provided stream.
            </summary>
            <param name="filename"></param>
            <param name="baseStreamProvider"></param>
            <param name="customId"></param>
            <param name="customType"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.ReadString(System.String,System.String,System.String,WebChemistry.Framework.Core.StructureReaderType)">
            <summary>
            Reads a structure from string source.
            </summary>
            <param name="filename"></param>
            <param name="source"></param>
            <param name="customId"></param>
            <param name="customType"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.ReadInternal(System.String,System.Func{System.IO.TextReader},System.String,WebChemistry.Framework.Core.StructureReaderType)">
            <summary>
            Read a structure from a stream.
            </summary>
            <param name="filename"></param>
            <param name="customId"></param>
            <param name="readerProvider"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.TryRead(System.String,System.Func{System.IO.Stream},System.String,WebChemistry.Framework.Core.StructureReaderType)">
            <summary>
            Try read a structure from a stream.
            </summary>
            <param name="filename"></param>
            <param name="customId"></param>
            <param name="readerProvider"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.ReadPdb(System.String,System.Func{System.IO.TextReader},WebChemistry.Framework.Core.PdbReaderParams)">
            <summary>
            Loads structure from PDB format - see  http://deposit.rcsb.org/adit/docs/pdb_atom_format.html for more details about the format.
            The current implementation is INCOMPLETE IMPLEMENTATION OF PDB FORMAT (loads only ATOM and HETATM records)!
            </summary>
            <param name="filename"></param>
            <param name="reader">Reader</param>
            <param name="parameters"></param>
            <returns>Structure constructed from the file. INCOMPLETE IMPLEMENTATION OF PDB FORMAT!</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.ReadPdbQt(System.String,System.Func{System.IO.TextReader},WebChemistry.Framework.Core.PdbReaderParams)">
            <summary>
            Read PDBQt file.
            </summary>
            <param name="filename"></param>
            <param name="reader"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.ReadMdlMol(System.String,System.Func{System.IO.TextReader},System.String)">
            <summary>
            Loads structure from MDL MOL format - see http://www.symyx.com/downloads/public/ctfile/ctfile.pdf for more details about the format.
            The current implementation is INCOMPLETE IMPLEMENTATION OF MDL MOL FORMAT!
            </summary>
            <param name="filename"></param>
            <param name="readerProvider">input stream</param>
            <param name="customId"></param>
            <returns>Structure constructed from the file. INCOMPLETE IMPLEMENTATION OF MDL MOL FORMAT!</returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReader.ReadMol2(System.String,System.Func{System.IO.TextReader},System.String)">
            <summary>
            Loads structure from MOL2 format - see http://tripos.com/tripos_resources/fileroot/pdfs/mol2_format.pdf for more details about the format.
            The current implementation is INCOMPLETE IMPLEMENTATION OF MOL1 FORMAT!
            If the file contains partial charges, saves them to the "PartialCharge" property.
            </summary>
            <param name="reader">input stream</param>
            <returns>Structure constructed from the file. INCOMPLETE IMPLEMENTATION OF MOL2 FORMAT!</returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureReaderWarning">
            <summary>
            Warning wrapper.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.StructureReaderWarning.Line">
            <summary>
            Line where the issue occurred.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.StructureReaderWarning.Message">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReaderWarning.ToString">
            <summary>
            Converts the warnings to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureReaderWarning.#ctor(System.String,System.Int32)">
            <summary>
            Create a new warning.
            </summary>
            <param name="line"></param>
            <param name="message"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.OnlyFirstModelLoadedReaderWarning">
            <summary>
            Raised if the file contains multiple models but only the 1st one loaded.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.AtomStructureReaderWarningType">
            <summary>
            Type of warning for atoms.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.AtomStructureReaderWarning">
            <summary>
            Warning for atoms.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AtomStructureReaderWarning.Atom">
            <summary>
            Atom ID.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AtomStructureReaderWarning.WarningType">
            <summary>
            Type of the warning.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.AtomStructureReaderWarning.#ctor(WebChemistry.Framework.Core.IAtom,System.String,System.Int32,WebChemistry.Framework.Core.AtomStructureReaderWarningType)">
            <summary>
            Create the warning.
            </summary>
            <param name="atom"></param>
            <param name="message"></param>
            <param name="line"></param>
            <param name="type"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.ResidueStructureReaderWarningType">
            <summary>
            Residue warning type.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.ResidueStructureReaderWarning">
            <summary>
            Warning for residues.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ResidueStructureReaderWarning.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ResidueStructureReaderWarning.Id">
            <summary>
            Atom ID.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ResidueStructureReaderWarning.WarningType">
            <summary>
            Type of the warning.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ResidueStructureReaderWarning.#ctor(System.String,WebChemistry.Framework.Core.Pdb.PdbResidueIdentifier,System.String,System.Int32,WebChemistry.Framework.Core.ResidueStructureReaderWarningType)">
            <summary>
            Create the warning.
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="message"></param>
            <param name="line"></param>
            <param name="type"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.ConectBondLengthReaderWarning">
            <summary>
            Warning for residues.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ConectBondLengthReaderWarning.Atom1">
            <summary>
            The first atom.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.ConectBondLengthReaderWarning.Atom2">
            <summary>
            The second atom.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.ConectBondLengthReaderWarning.#ctor(WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Core.IAtom)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="T:WebChemistry.Framework.Core.StructureType">
            <summary>
            Structure type.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureType.Unknown">
            <summary>
            Uknown type.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureType.Pdb">
            <summary>
            PDB File Format.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureType.PdbQt">
            <summary>
            Cute PDB.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureType.Pqr">
            <summary>
            PQR format.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureType.Mol">
            <summary>
            MOL Format.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.StructureType.Mol2">
            <summary>
            MOL2 Format.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.GetPdbAtomRecord(WebChemistry.Framework.Core.IAtom)">
            <summary>
            Get the PDB atom record for a given atom.
            </summary>
            <param name="atom"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.GetPqrAtomRecord(WebChemistry.Framework.Core.IAtom,System.Double,System.Char)">
            <summary>
            Get the PQR atom record.
            </summary>
            <param name="atom"></param>
            <param name="charge"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WritePdb(WebChemistry.Framework.Core.IStructure,System.IO.TextWriter,System.Boolean)">
            <summary>
            Writes a PDB representation to a file. Shortcut for StructureWriter.WritePdb.
            </summary>
            <param name="structure"></param>
            <param name="writer"></param>
            <param name="sortAtoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WritePdb(WebChemistry.Framework.Core.IStructure,System.String,System.Boolean)">
            <summary>
            Writes a PDB representation to a file. Shortcut for StructureWriter.WritePdb.
            </summary>
            <param name="structure"></param>
            <param name="filename"></param>
            <param name="sortAtoms"></param>
            <param name="includeAllConnects"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WritePqr(WebChemistry.Framework.Core.IStructure,System.String,System.Func{WebChemistry.Framework.Core.IAtom,System.Double},System.Boolean)">
            <summary>
            Writes PQR to a file.
            </summary>
            <param name="structure"></param>
            <param name="filename"></param>
            <param name="chargeSelector"></param>
            <param name="sortAtoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.ToPdbString(WebChemistry.Framework.Core.IStructure,System.Boolean)">
            <summary>
            Convert a structure to a PDB string.
            </summary>
            <param name="structure"></param>
            <param name="sortAtoms"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.ToPqrString(WebChemistry.Framework.Core.IStructure,System.Func{WebChemistry.Framework.Core.IAtom,System.Double},System.Boolean)">
            <summary>
            Writes PQR format.
            </summary>
            <param name="structure"></param>
            <param name="chargeSelector"></param>
            <param name="sortAtoms"></param>
            <param name="remark"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WritePqr(WebChemistry.Framework.Core.IStructure,System.IO.TextWriter,System.Func{WebChemistry.Framework.Core.IAtom,System.Double},System.Boolean)">
            <summary>
            Writes a PQR file.
            </summary>
            <param name="structure"></param>
            <param name="writer"></param>
            <param name="chargeSelector">if null, select PqrCharge()</param>
            <param name="sortAtoms"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WriteMol2(WebChemistry.Framework.Core.IStructure,System.IO.TextWriter,System.String,System.Func{WebChemistry.Framework.Core.IAtom,System.Double})">
            <summary>
            Write structure as Mol2.
            </summary>
            <param name="structure"></param>
            <param name="writer"></param>
            <param name="remark"></param>
            <param name="chargeSelector"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WriteMol2(WebChemistry.Framework.Core.IStructure,System.String,System.String,System.Func{WebChemistry.Framework.Core.IAtom,System.Double})">
            <summary>
            Write MOL2 to file.
            </summary>
            <param name="structure"></param>
            <param name="filename"></param>
            <param name="remark"></param>
            <param name="chargeSelector"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.ToMol2String(WebChemistry.Framework.Core.IStructure,System.String,System.Func{WebChemistry.Framework.Core.IAtom,System.Double})">
            <summary>
            Convert to MOL2 string.
            </summary>
            <param name="structure"></param>
            <param name="remark"></param>
            <param name="chargeSelector"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WriteMol(WebChemistry.Framework.Core.IStructure,System.IO.TextWriter)">
            <summary>
            Convert to SDF/MOL format.
            </summary>
            <param name="structure"></param>
            <param name="writer"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.WriteMol(WebChemistry.Framework.Core.IStructure,System.String)">
            <summary>
            Write MOL to file.
            </summary>
            <param name="structure"></param>
            <param name="filename"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.StructureWriter.ToMolString(WebChemistry.Framework.Core.IStructure)">
            <summary>
            Convert to MOL string.
            </summary>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.AppVersionConverter">
            <summary>
            EntityId Json converter
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.AppVersionTypeConverter">
            <summary>
            Entity Id type converter.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.AppVersion">
            <summary>
            Handles the application version.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.AppVersion.Unknown">
            <summary>
            Unknown;
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AppVersion.Major">
            <summary>
            Major version.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AppVersion.Minor">
            <summary>
            Minor version.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AppVersion.Year">
            <summary>
            Year of creation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AppVersion.Month">
            <summary>
            Month of creation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AppVersion.Day">
            <summary>
            Day of creation.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.AppVersion.Revision">
            <summary>
            More versions per day?
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.ToString">
            <summary>
            Returns text in the format Major.Minor.Year.Month.Day[Revision]
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.GetHashCode">
            <summary>
            Compute hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.Equals(WebChemistry.Framework.Core.AppVersion)">
            <summary>
            Check if the versions are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.Equals(System.Object)">
            <summary>
            Check if the versions are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.op_Equality(WebChemistry.Framework.Core.AppVersion,WebChemistry.Framework.Core.AppVersion)">
            <summary>
            Equality operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.op_Inequality(WebChemistry.Framework.Core.AppVersion,WebChemistry.Framework.Core.AppVersion)">
            <summary>
            Non-equality operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.CompareTo(WebChemistry.Framework.Core.AppVersion)">
            <summary>
            Compares two versions.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            Creates a new version.
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="revision"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.Parse(System.String)">
            <summary>
            Parses a version string.
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.AppVersion.op_Implicit(WebChemistry.Framework.Core.AppVersion)~System.String">
            <summary>
            Implicit to string conversion.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <remarks>
            <paramref name="stream"/> is assumed to be encoded with <see cref="P:System.Text.Encoding.UTF8"/>, and will be disposed when this <c>CsvReader</c> is disposed.
            </remarks>
            <param name="stream">
            A stream from which CSV data will be read.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <remarks>
            <paramref name="stream"/> will be disposed when this <c>CsvReader</c> is disposed.
            </remarks>
            <param name="stream">
            A stream from which CSV data will be read.
            </param>
            <param name="encoding">
            The encoding for CSV data within the stream.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="stream">
            A stream from which CSV data will be read.
            </param>
            <param name="encoding">
            The encoding of CSV data within the stream.
            </param>
            <param name="leaveOpen">
            If <see langword="true"/>, <paramref name="stream"/> will not be disposed when this <c>CsvReader</c> is disposed.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <remarks>
            <paramref name="textReader"/> will be disposed when this <c>CsvReader</c> is disposed.
            </remarks>
            <param name="textReader">
            The source of the CSV data.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="textReader">
            The source of the CSV data.
            </param>
            <param name="leaveOpen">
            If <see langword="true"/>, <paramref name="textReader"/> will not be disposed when this <c>CsvReader</c> is disposed.
            </param>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.PreserveLeadingWhiteSpace">
            <summary>
            Gets or sets a value indicating whether leading white space should be preserved.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.PreserveTrailingWhiteSpace">
            <summary>
            Gets or sets a value indicating whether trailing white space should be preserved.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.ValueSeparator">
            <summary>
            Gets or sets the character used to separate values within the CSV.
            </summary>
            <remarks>
            This property specifies what character is used to separate values within the CSV. The default value separator is a comma (<c>,</c>).
            </remarks>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.ValueDelimiter">
            <summary>
            Gets or sets the character used to delimit values within the CSV.
            </summary>
            <remarks>
            <para>
            This property specifies what character is used to delimit values within the CSV. The default value delimiter is a double quote (<c>"</c>). If set to <see langword="null"/>, no character will
            be treated as a delimiter.
            </para>
            <para>
            Note that values within the CSV are not required to be delimited. However, delimiting a value allows it to contain the delimiter character itself, along with new line characters (ie. a multi-line value).
            </para>
            </remarks>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.HeaderRecord">
            <summary>
            Gets or sets the header record.
            </summary>
            <remarks>
            <para>
            This property will be automatically set if <see cref="M:WebChemistry.Framework.Core.Csv.CsvReader.ReadHeaderRecord"/> or <see cref="!:ReadHeaderRecordAsync"/> is called. Alternatively, it can be set explicitly in the case where the underlying
            data source does not itself contain a header record, but the structure of the data is known.
            </para>
            <para>
            Any <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/> produced by this <c>CsvReader</c> will have its <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/> property set to the value of this property. Setting a header record allows 
            the values within data records to be accessed both by index and by column name.
            <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/>
            </para>
            <para>
            Any attempt to set this property when the first record has already been read will result in an exception.
            </para>
            </remarks>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber">
            <summary>
            Gets the current record number.
            </summary>
            <remarks>
            This property gives the number of records that have been read by this <c>CsvReader</c>. This includes the header record, unless it is provided explicitly via the
            <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.HeaderRecord"/> property.
            </remarks>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvReader.HasMoreRecords">
            <summary>
            Gets a value indicating whether there are more records to read.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.FromCsvString(System.String)">
            <summary>
            Creates a <c>CsvReader</c> that will read the CSV data in <paramref name="csv"/>.
            </summary>
            <param name="csv">
            The CSV data to read.
            </param>
            <returns>
            A <c>CsvReader</c> that will read the CSV in <paramref name="csv"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.SkipRecord">
            <summary>
            Attempts to skip a record in the data, and increments <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber"/> if successful.
            </summary>
            <returns>
            <see langword="true"/> if the record is successfully skipped, or <see langword="false"/> if there are no more records to skip.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.SkipRecord(System.Boolean)">
            <summary>
            Attempts to skip a record in the data, optionally incrementing <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber"/> if successful.
            </summary>
            <param name="incrementRecordNumber">
            <see langword="true"/> to increment <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber"/> upon successfully skipping a record.
            </param>
            <returns>
            <see langword="true"/> if the record is successfully skipped, or <see langword="false"/> if there are no more records to skip.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.SkipRecords(System.Int32)">
            <summary>
            Attempts to skip <paramref name="count"/> records in the data, and increments <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber"/> by the number of records actually skipped.
            </summary>
            <remarks>
            If there are fewer than <paramref name="count"/> records remaining in the data, this method will skip the remaining records and return the number of records actually skipped.
            </remarks>
            <param name="count">
            The number of records to skip.
            </param>
            <returns>
            The actual number of records skipped.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.SkipRecords(System.Int32,System.Boolean)">
            <summary>
            Attempts to skip <paramref name="count"/> records in the data, optionally incrementing <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber"/> by the number of records actually skipped.
            </summary>
            <remarks>
            If there are fewer than <paramref name="count"/> records remaining in the data, this method will skip the remaining records and return the number of records actually skipped.
            </remarks>
            <param name="count">
            The number of records to skip.
            </param>
            <param name="incrementRecordNumber">
            <see langword="true"/> to increment <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.RecordNumber"/> by the number of records skipped.
            </param>
            <returns>
            The actual number of records skipped.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.ReadHeaderRecord">
            <summary>
            Reads the first record from the underlying CSV data and assigns it to <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.HeaderRecord"/>.
            </summary>
            <remarks>
            <para>
            If successful, all <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/>s read by this <c>CsvReader</c> will have their <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/> set accordingly.
            </para>
            <para>
            Any attempt to call this method when this <c>CsvReader</c> has already read a record will result in an exception.
            </para>
            </remarks>
            <returns>
            The <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> that was read, also available via the <see cref="P:WebChemistry.Framework.Core.Csv.CsvReader.HeaderRecord"/> property. If no records are left, this method returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.ReadDataRecord">
            <summary>
            Reads a <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/> from the underlying CSV.
            </summary>
            <returns>
            The <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/> that was read, or <see langword="null"/> if there are no more records to read.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.ReadDataRecords(WebChemistry.Framework.Core.Csv.DataRecord[],System.Int32,System.Int32)">
            <summary>
            Reads at most <paramref name="count"/> <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/>s and populates <paramref name="buffer"/> with them, beginning at index <paramref name="offset"/>.
            </summary>
            <remarks>
            When reading a lot of data, it is possible that better performance can be achieved by using this method.
            </remarks>
            <param name="buffer">
            The buffer to populate with the <see cref="T:WebChemistry.Framework.Core.Csv.DataRecord"/>s that are read.
            </param>
            <param name="offset">
            The offset into <paramref name="buffer"/> at which to start placing data records.
            </param>
            <param name="count">
            The maximum number of data records to read.
            </param>
            <returns>
            The number of data records actually read and stored in <paramref name="buffer"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.Close">
            <summary>
            Closes this <c>CsvReader</c>.
            </summary>
            <remarks>
            This method is an alternative means of disposing the <c>CsvReader</c>. Generally one should prefer a <c>using</c> block to automatically dispose of the <c>CsvReader</c>.
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.Dispose">
            <summary>
            Disposes of this <c>CsvReader</c>.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Disposes of this <c>CsvReader</c>.
            </summary>
            <remarks>
            Subclasses can override this method to supplement dispose logic.
            </remarks>
            <param name="disposing">
            <see langword="true"/> if being called in response to a Dispose call, otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="T:WebChemistry.Framework.Core.Csv.CsvTable">
            <summary>
            Represents a Csv table.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.CsvTable.Header">
            <summary>
            Table header.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvTable.#ctor(WebChemistry.Framework.Core.Csv.HeaderRecord,System.Collections.Generic.IList{WebChemistry.Framework.Core.Csv.DataRecord})">
            <summary>
            Creates a new table.
            </summary>
            <param name="header"></param>
            <param name="records"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvTable.ReadFile(System.String,System.Char,System.Char)">
            <summary>
            Reads CSV from a file.
            </summary>
            <param name="filename"></param>
            <param name="separator"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvTable.ReadString(System.String,System.Char,System.Char)">
            <summary>
            Reads CSV from a file.
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.CsvTable.Read(System.Func{System.IO.TextReader},System.Char,System.Char)">
            <summary>
            Reads table from a stream.
            </summary>
            <param name="streamProvider"></param>
            <param name="separator"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Core.Csv.DataRecord">
            <summary>
            Represents a data record in a CSV file.
            </summary>
            <remarks>
            <para>
            A <c>DataRecord</c> represents a CSV record that is not the header record. Values in the data record can be accessed by their index. A data record can have an associated
            <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> (exposed via <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>), in which case values in the data record may also be accessed via a column name.
            </para>
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.#ctor">
            <summary>
            Initializes a new instance of the DataRecord class.
            </summary>
            <remarks>
            The resultant data record will have no values, but is not read-only.
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.#ctor(WebChemistry.Framework.Core.Csv.HeaderRecord)">
            <summary>
            Initializes a new instance of the DataRecord class.
            </summary>
            <remarks>
            The resultant data record will have no values, but is not read-only. It will use the specified <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> (which will therefore
            be returned from <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>).
            </remarks>
            <param name="headerRecord">
            An optional <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> associated with this <c>DataRecord</c>.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.#ctor(WebChemistry.Framework.Core.Csv.HeaderRecord,System.String[])">
            <summary>
            Initializes a new instance of the DataRecord class.
            </summary>
            <remarks>
            The resultant data record will the specified values, and is not read-only. It will use the specified <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> (which will therefore
            be returned from <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>).
            </remarks>
            <param name="headerRecord">
            An optional <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> associated with this <c>DataRecord</c>.
            </param>
            <param name="values">
            The values comprising this <c>DataRecord</c>.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.#ctor(WebChemistry.Framework.Core.Csv.HeaderRecord,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the DataRecord class.
            </summary>
            <remarks>
            The resultant data record will have the specified values, and may or may not be read-only. It will use the specified <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> (which will therefore
            be returned from <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>).
            </remarks>
            <param name="headerRecord">
            An optional <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> associated with this <c>DataRecord</c>.
            </param>
            <param name="readOnly">
            <see langword="true"/> to mark this <c>DataRecord</c> as read-only.
            </param>
            <param name="values">
            The values comprising this <c>DataRecord</c>.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.#ctor(WebChemistry.Framework.Core.Csv.HeaderRecord,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the DataRecord class.
            </summary>
            <remarks>
            The resultant data record will the specified values, and is not read-only. It will use the specified <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> (which will therefore
            be returned from <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>).
            </remarks>
            <param name="headerRecord">
            An optional <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> associated with this <c>DataRecord</c>.
            </param>
            <param name="values">
            The values comprising this <c>DataRecord</c>.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.#ctor(WebChemistry.Framework.Core.Csv.HeaderRecord,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the DataRecord class.
            </summary>
            <remarks>
            The resultant data record will have the specified values, and may or may not be read-only. It will use the specified <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> (which will therefore
            be returned from <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>).
            </remarks>
            <param name="headerRecord">
            An optional <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> associated with this <c>DataRecord</c>.
            </param>
            <param name="readOnly">
            <see langword="true"/> to mark this <c>DataRecord</c> as read-only.
            </param>
            <param name="values">
            The values comprising this <c>DataRecord</c>.
            </param>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord">
            <summary>
            Gets the <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> in use by this data record.
            </summary>
            <remarks>
            In order to get or set values in a data record via their column name, a header record must be provided. This property gets the <see cref="!:Kent.Boogaart.KBCsv.HeaderRecord"/> that
            this data record uses to resolve column indexes given a column name.
            </remarks>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.DataRecord.Item(System.String)">
            <summary>
            Gets or sets a value in this data record by its column name.
            </summary>
            <param name="columnName">
            The name of the column.
            </param>
            <returns>
            The value in the specified column.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.GetDoubleValue(System.String)">
            <summary>
            Tries to convert the value to double.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.GetDoubleValue(System.Int32)">
            <summary>
            Tries to convert the value to double.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.GetIntValue(System.String)">
            <summary>
            Tries to convert the value to int.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.GetIntValue(System.Int32)">
            <summary>
            Tries to convert the value to int.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.GetValueOrNull(System.String)">
            <summary>
            Gets a value in this data record given the column name, or <see langword="null"/> if the specified column does not exist, or if there is no value in this data record at the column's index.
            </summary>
            <param name="columnName">
            The name of the column.
            </param>
            <returns>
            The value in the specified column, or <see langword="null"/> if the column does not exist, or if there is no value in this data record at the column's index.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.Equals(WebChemistry.Framework.Core.Csv.DataRecord)">
            <summary>
            Determines whether this data record is equal to another.
            </summary>
            <remarks>
            Data records are considered equal if their <see cref="P:WebChemistry.Framework.Core.Csv.DataRecord.HeaderRecord"/>s are equal (or both absent), and if their values are equal.
            </remarks>
            <param name="other">
            The other data record.
            </param>
            <returns>
            <see langword="true"/> if the data records are equal, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.DataRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:WebChemistry.Framework.Core.Csv.HeaderRecord">
            <summary>
            Represents the header record of a CSV file.
            </summary>
            <remarks>
            <para>
            A <c>HeaderRecord</c> is a specialized <see cref="T:WebChemistry.Framework.Core.Csv.RecordBase"/> whose values are the names of columns in the CSV. It permits the index of each column to be obtained given
            its name (see <see cref="P:Kent.Boogaart.KBCsv.HeaderRecord.Item(System.String)"/> and <see cref="M:WebChemistry.Framework.Core.Csv.HeaderRecord.GetColumnIndexOrNull(System.String)"/>).
            </para>
            <para>
            Note that there is a cost to maintaining the indexes of columns by their name. If possible, favor passing in all column names during construction. Otherwise, favor using
            <see cref="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Add(System.String)"/> only, avoiding <see cref="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Insert(System.Int32,System.String)"/>, <see cref="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Remove(System.String)"/> and <see cref="M:WebChemistry.Framework.Core.Csv.HeaderRecord.RemoveAt(System.Int32)"/> wherever possible.
            </para>
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.#ctor">
            <summary>
            Initializes a new instance of the HeaderRecord class.
            </summary>
            <remarks>
            The resultant header record will have no values, but is not read-only.
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the HeaderRecord class with the specified column names.
            </summary>
            <remarks>
            The resultant header record will have the specified column names as values and is not read-only.
            </remarks>
            <param name="columnNames">
            The names of the columns in the header record.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the HeaderRecord class.
            </summary>
            <param name="columnNames">
            The names of the columns in the header record.
            </param>
            <param name="readOnly">
            <see langword="true"/> if the header record is read-only, otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the HeaderRecord class with the specified column names.
            </summary>
            <remarks>
            The resultant header record will have the specified column names as values and is not read-only.
            </remarks>
            <param name="columnNames">
            The names of the columns in the header record.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the HeaderRecord class.
            </summary>
            <param name="columnNames">
            The names of the columns in the header record.
            </param>
            <param name="readOnly">
            <see langword="true"/> if the header record is read-only, otherwise <see langword="false"/>.
            </param>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.HeaderRecord.Item(System.String)">
            <summary>
            Gets the index of the column with the specified name.
            </summary>
            <param name="columnName">
            The column name.
            </param>
            <returns>
            The index of the column with the specified name.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.GetColumnIndexOrNull(System.String)">
            <summary>
            Gets the index of the specified column, or <see langword="null"/> if the column does not exist in this header record.
            </summary>
            <param name="columnName">
            The column name.
            </param>
            <returns>
            The index of the column, or <see langword="null"/> if the column does not exist in this header record.
            </returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.HeaderRecord.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Insert(System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Clear">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.HeaderRecord.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:WebChemistry.Framework.Core.Csv.RecordBase">
            <summary>
            A base class for CSV records.
            </summary>
            <remarks>
            <para>
            A record consists of zero or more non-<see langword="null"/> <see cref="T:System.String"/> values, which are accessible via their index. <see cref="P:WebChemistry.Framework.Core.Csv.RecordBase.Count"/> returns the number of values in the record.
            A record may be read-only, as indicated by the <see cref="P:WebChemistry.Framework.Core.Csv.RecordBase.IsReadOnly"/> property. Read-only records will throw an exception if any attempt is made to modify the record,
            such as by calling <see cref="M:WebChemistry.Framework.Core.Csv.RecordBase.Add(System.String)"/> or <see cref="M:WebChemistry.Framework.Core.Csv.RecordBase.Remove(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the RecordBase class.
            </summary>
            <param name="readOnly">
            <see langword="true"/> if the record is read-only, otherwise <see langword="false"/>.
            </param>
            <param name="values">
            The values comprising the record.
            </param>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.RecordBase.Item(System.Int32)">
            <summary>
            Gets or sets a value in this record by index.
            </summary>
            <param name="index">
            The index of the value to retrieve.
            </param>
            <returns>
            The value at the specified index.
            </returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.RecordBase.IsReadOnly">
            <summary>
            Gets a value indicating whether this record is read-only.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Csv.RecordBase.Count">
            <summary>
            Gets the number of values in this record.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.GetValueOrNull(System.Int32)">
            <summary>
            Gets a value at the specified index, or <see langword="null"/> if the index is invalid.
            </summary>
            <param name="index">
            The index of the value to retrieve.
            </param>
            <returns>
            The value at the specified index, or <see langword="null"/> if the index is not valid.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Clear">
            <summary>
            Clears all values in this record.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Contains(System.String)">
            <summary>
            Determines whether this record contains the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <see langword="true"/> if this record contains <paramref name="value"/>, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.IndexOf(System.String)">
            <summary>
            Determines the index of the specified value within this record.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The index of the value, or <c>-1</c> if the value does not exist in this record.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Add(System.String)">
            <summary>
            Adds the specified value to this record.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Insert(System.Int32,System.String)">
            <summary>
            Inserts the specified value into this record.
            </summary>
            <param name="index">
            The index at which to insert the value.
            </param>
            <param name="value">
            The value to insert.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Remove(System.String)">
            <summary>
            Removes the specified value from this record.
            </summary>
            <param name="value">
            The value to remove.
            </param>
            <returns>
            <see langword="true"/> if the value was removed, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index.
            </summary>
            <param name="index">
            The index of the value to remove.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the values in this record to the specified array.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            The starting index in the array to which values will be copied.
            </param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Equals(WebChemistry.Framework.Core.Csv.RecordBase)">
            <summary>
            Determines whether this record is equal to another.
            </summary>
            <remarks>
            Records are considered equal if they have the same number of values, and every corresponding value is equal.
            </remarks>
            <param name="other">
            The other record.
            </param>
            <returns>
            <see langword="true"/> if the records are equal, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:WebChemistry.Framework.Core.Csv.RecordBase.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:WebChemistry.Framework.Core.NumberParser">
            <summary>
            Faster number parsing methods.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.NumberParser.ParseIntFast(System.String,System.Int32,System.Int32)">
            <summary>
            Integers.
            </summary>
            <param name="str"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.NumberParser.ParseDoubleFast(System.String,System.Int32,System.Int32)">
            <summary>
            Doubles.
            </summary>
            <param name="str"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Grammar.Node(WebChemistry.Framework.Core.Utils.Rule)">
            <summary>
            This rule should be used only with a named rule, since the name
            of the rule is used as the label.
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Grammar.Recursive(System.Func{WebChemistry.Framework.Core.Utils.Rule})">
            <summary>
            This creates rules that can recursively refer to themselves
            directly or indirectly. 
            </summary>
            <param name="ruleGen"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Grammar.InitGrammar(System.Type)">
            <summary>
            Provides a name to all fields of type Rule.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Utils.Parser">
            <summary>
            Parser wrapper
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Parser.Parse(WebChemistry.Framework.Core.Utils.Rule,System.String)">
            <summary>
            Parse an input string and return the best match.
            </summary>
            <param name="rootRule"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="begin"></param>
            <param name="label"></param>
            <param name="input"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.#ctor(System.String,System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.Utils.Node})">
            <summary>
            Constructs an AstNode from a label and a collection of AstNodes
            </summary>
            <param name="label"></param>
            <param name="content"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.#ctor(System.String,WebChemistry.Framework.Core.Utils.Node[])">
            <summary>
            Constructs an AstNode from a label and an arbitrary number of parameters.
            </summary>
            <param name="label"></param>
            <param name="content"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.#ctor(System.String,System.String)">
            <summary>
            Constructs a leaf AstNode with the specified text content.
            </summary>
            <param name="label"></param>
            <param name="content"></param>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs an AstNode from an Xml element.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:WebChemistry.Framework.Core.Utils.Node.Input">
            <summary>
            Input string used to create AST node.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Utils.Node.Begin">
            <summary>
            Index where AST content starts within Input.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Utils.Node.End">
            <summary>
            Index where AST content ends within Input .
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Utils.Node.Label">
            <summary>
            The name of the associated rule.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Utils.Node.Nodes">
            <summary>
            List of child nodes.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.Length">
            <summary>
            Length of associated text. 
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.Text">
            <summary>
            Text associated with the parse result.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.IsLeaf">
            <summary>
            Indicates whether there are any children nodes or not. 
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.ToXml">
            <summary>
            Converts the Parse node to an XML representation.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.GetNodes(System.String)">
            <summary>
            Returns all child nodes with the given label
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.GetNode(System.String)">
            <summary>
            Returns the first child node with the given label.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.Item(System.String)">
            <summary>
            Returns the first child node with the given label.
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.Item(System.Int32)">
            <summary>
            Returns the nth child node.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.Count">
            <summary>
            Returns the number of child nodes.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Utils.Node.ToString">
            <summary>
            Returns a string representation. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Core.Utils.Node.Descendants">
            <summary>
            Returns all the decenendant nodes.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Core.Utils.NodeRule.UseCache">
            <summary>
            Set to false to see how long it takes to parse grammars without memoization.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Core.Timing">
            <summary>
            Provides a simple wrapper to time computations.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Core.Timing.Get``1(System.Func{``0})">
            <summary>
            Returns time x function result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Core.Timing.Get``1(System.Action)">
            <summary>
            Gets a timing of an action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Vector3DValuePair`1">
            <summary>
            Represents a priority/value pair.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.Vector3DValuePair`1.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.Vector3DValuePair`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Vector3DValuePair`1.#ctor(WebChemistry.Framework.Math.Vector3D,`0)">
            <summary>
            Creates the pair.
            </summary>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.CoordinateComparer3D`1">
            <summary>
            Compares the given coordinate...
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.K3DPivotSelectionMethod">
            <summary>
            Methods of pivot selection when constructing the tree.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.K3DPivotSelectionMethod.Median">
            <summary>
            The median element is sorted.
            This is the slowest method, but ensures the tree is balanced.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.K3DPivotSelectionMethod.Average">
            <summary>
            The pivot is selected as the element closes to the (min+max)/2 in each particular dimension.
            This is a lot faster and almost perfectly balanced for uniformly distributed data.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.K3DPivotSelectionMethod.Random">
            <summary>
            The pivot is chosen randomly.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.K3DTree">
            <summary>
            A helper class for creating K3D-trees
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.K3DTree.Create``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,WebChemistry.Framework.Math.Vector3D},System.Int32,WebChemistry.Framework.Geometry.K3DPivotSelectionMethod)">
            <summary>
            Creates n k3d tree.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="data"></param>
            <param name="keySelector"></param>
            <param name="bucketSize"></param>
            <param name="pivotSelectionMethod"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.K3DTree`1">
            <summary>
            3D k-D tree implementation.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.K3DTree`1.Selectors">
            <summary>
            Selectors of individual dimensions.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.K3DTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,WebChemistry.Framework.Math.Vector3D},System.Int32,WebChemistry.Framework.Geometry.K3DPivotSelectionMethod)">
            <summary>
            Creates a K3D tree.
            </summary>
            <param name="values"></param>
            <param name="keySelector"></param>
            <param name="leafCapacity"></param>
            <param name="method"></param>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.K3DTree`1.NearestRadius(WebChemistry.Framework.Math.Vector3D,System.Double)">
            <summary>
            Finds all elements in a ball with maxDistance radius.
            The priority is the squared distance to the pivot.
            </summary>
            <param name="pivot"></param>
            <param name="maxDistance"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.K3DTree`1.Nearest(WebChemistry.Framework.Math.Vector3D,System.Int32,System.Double)">
            <summary>
            Finds n closest elements that are no further than maxDistance.
            The priority is the squared distance to the pivot.
            </summary>
            <param name="pivot"></param>
            <param name="n"></param>
            <param name="maxDistance"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.K3DTree`1.NearestCount(WebChemistry.Framework.Math.Vector3D,System.Int32)">
            <summary>
            Finds the n nearest elements. Priority is squared distance.
            </summary>
            <param name="pivot"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.K3DTree`1.Nearest(WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Finds the nearest element. Priority is squared distance.
            </summary>
            <param name="pivot"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Helpers.PriorityArray`2">
            <summary>
            A sorted array that can store up to N elements. Throws away elements if the array is full
            and an elements with lower priority arrives.
            </summary>
            <typeparam name="TPriority"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.Helpers.PriorityArray`2.Count">
            <summary>
            Determines how much the array is filled.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.Helpers.PriorityArray`2.Item(System.Int32)">
            <summary>
            Get the i-th element.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Helpers.PriorityArray`2.GetLargestPriority(`0)">
            <summary>
            Returns the largest priority in the array.
            </summary>
            <param name="maxIfNotFull"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Helpers.PriorityArray`2.Add(`0,`1)">
            <summary>
            Throws away elements if the array is full
            and an elements with lower priority arrives.
            </summary>
            <param name="priority"></param>
            <param name="value"></param>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Helpers.PriorityArray`2.#ctor(System.Int32,System.Func{`0,`0,System.Int32})">
            <summary>
            Creates a priority array.
            </summary>
            <param name="capacity"></param>
            <param name="comparison"></param>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Helpers.PriorityArrayView`2">
            <summary>
            Represents a view of the first N elements of an array.
            </summary>
            <typeparam name="TPriority"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Helpers.ReversePriorityArrayView`2">
            <summary>
            The elements are accessed in reverse order.
            </summary>
            <typeparam name="TPriority"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Helpers.PriorityBinaryHeap`2">
            <summary>
            Binary heap
            
            Taken from QuickGraph library.
            </summary>
            <remarks>
            Indexing rules:
            
            parent index: index ¡ 1)/2
            left child: 2 * index + 1
            right child: 2 * index + 2
            
            Reference:
            http://dotnetslackers.com/Community/files/folders/data-structures-and-algorithms/entry28722.aspx
            </remarks>
            <typeparam name="TValue">type of the value</typeparam>
            <typeparam name="TPriority">type of the priority metric</typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.PriorityValuePair`2">
            <summary>
            Represents a priority/value pair.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.PriorityValuePair`2.Priority">
            <summary>
            Priority.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.PriorityValuePair`2.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.PriorityValuePair`2.#ctor(`0,`1)">
            <summary>
            Creates the pair.
            </summary>
            <param name="priority"></param>
            <param name="value"></param>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.GeometricalCenterInfo">
            <summary>
            Represents a geometrical center and the bounding sphere radius of a structure.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.GeometricalCenterInfo.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.GeometricalCenterInfo.Radius">
            <summary>
            Gets the radius.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.GeometricalCenterInfo.#ctor(WebChemistry.Framework.Math.Vector3D,System.Double)">
            <summary>
            Creates the struct.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.IVertex">
            <summary>
            Represents an object with a position.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.IVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.IVertex3D">
            <summary>
            Represents an object with a 3D position.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.IVertex3D.Position">
            <summary>
            Position of the vertex.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.KDAtomTree">
            <summary>
            A specialized 3D kD tree to store atom. Inherits from K3DTree of IAtom.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.KDAtomTree.#ctor(System.Collections.Generic.IEnumerable{WebChemistry.Framework.Core.IAtom},System.Func{WebChemistry.Framework.Core.IAtom,WebChemistry.Framework.Math.Vector3D},System.Int32,WebChemistry.Framework.Geometry.K3DPivotSelectionMethod)">
            <summary>
            Create an atom tree with specific key selector.
            </summary>
            <param name="atoms"></param>
            <param name="keySelector"></param>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.DelaunayTriangulation3D`2.Cells">
            <summary>
            Cells of the triangulation.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.DelaunayTriangulation3D`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.Create(System.Collections.Generic.IEnumerable{`0},System.Func{`0,WebChemistry.Framework.Math.Vector3D})">
            <summary>
            creates a new Triangulation from the given sequence of vertices
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.Finish(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0})">
            <summary>
            Fills the Simplices list
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.Init(WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0}[])">
            <summary>
            Creates initial tetrahedron
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.Insert(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0})">
            <summary>
            Inserts a point into triangulation
            </summary>
            <param name="toProcess">A two-directional linked list of tetrahedra, whose circumsphere contains vertex</param>
            <param name="vertex">The new vertex</param>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.RemoveFromList(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0}@)">
            <summary>
            Removes a tetrahedron from two-directional linked list
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.TryUpdate(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0},WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0})">
            <summary>
            Attempts to update the tetrahedron to contain the newVertex instead of opposite
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.CreateLinks(WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFace{`0})">
            <summary>
            Creates links between faces of new tetrahedra
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.CanConnect(WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFace{`0},WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFace{`0})">
            <summary>
            Checks whether the two faces have the same vertices
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.ConnectFaces(WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFace{`0},WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFace{`0})">
            <summary>
            Establishes neighbour relationship between the two tetrahedra
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.Localize(WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0},WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0})">
            <summary>
            Finds the list of tetrahedra that contain the new vertex in their circumspheres
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.SearchNext(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0}@)">
            <summary>
            Add new tetrahedron to the stack if it is not marked
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.FindNextStep(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},System.Double@,WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0})">
            <summary>
            Find next tetrahedron that is closer to the target point
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.FindNextStepDegenerated(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},System.Double@,WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0})">
            <summary>
            Find next tetrahedron that is closer to the target point using exact plane-point tests
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.DHTriangulation`1.PlaneCompareDegenerated(WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron{`0},System.Int32,WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{`0})">
            <summary>
            Computes exact plane-vertex position test
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFace`1">
            <summary>
            Represents one side of a tetrahedron
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Triangulation.DH.DisconnectedFaceFactory`1">
            <summary>
            Takes care of recycling instances of the DisconnectedFace class
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.HilbertEncode3D(System.Int32,WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.IntCoordinates)">
            <remarks>
            Algorithm by Chris Hamilton, Compact hilbert Indices, 2006, p.19
            This implementation is 3D specific
            </remarks>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.RotRight3b(System.UInt32,System.Int32)">
            <summary>
            Right bit rotation of a 3-bit number stored in an unsigned integer
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.RotLeft3b(System.UInt32,System.Int32)">
            <summary>
            Left bit rotation of a 3-bit number stored in an unsigned integer
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.GrayCodeInverse3b(System.UInt32)">
            <summary>
            Computes the number encoded in a 3-bit gray code value
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.ConvertCoordinates``1(WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex{``0},WebChemistry.Framework.Math.Vector3D,WebChemistry.Framework.Math.Vector3D,System.Int32)">
            <summary>
            Converts vertex coordinates to an integer representation
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.Triangulation.DH.HilbertOrdering.ComputeCurveOrder(System.Int32)">
            <summary>
            Computes the order of the Hilbert curve
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron`1">
            <summary>
            Represents one triangulation cell
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Geometry.Triangulation.DH.Tetrahedron`1.Tag">
            <summary>
            Helper.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Triangulation.DH.TetrahedronFactory`1">
            <summary>
            Takes care of recycling instances of the DisconnectedFace class
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Triangulation.DH.TriangulationVertex`1">
            <summary>
            Represents one vertex in the triangulation
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.ITriangulation3D`2">
            <summary>
            Triangulation 3D interface.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.Triangulation3D">
            <summary>
            Factory class for creating triangulations.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.TriangulationCell3D`2">
            <summary>
            A  triangulation cell.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.TriangulationCell3D`2.Adjacency">
            <summary>
            Adjacency. Array of length "dimension".
            If F = Adjacency[i] then the vertices shared with F are Vertices[j] where j != i.
            In the context of triangulation, can be null (indicates the cell is at boundary).
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.TriangulationCell3D`2.Vertices">
            <summary>
            Tetrahedron vertices.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.DefaultTriangulationCell3D`1">
            <summary>
            Default triangulation cell.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.VoronoiEdge3D`2">
            <summary>
            A class representing an (undirected) edge of the Voronoi graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.VoronoiEdge3D`2.Source">
            <summary>
            Source of the edge.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.VoronoiEdge3D`2.Target">
            <summary>
            Target of the edge.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiEdge3D`2.Equals(System.Object)">
            <summary>
            ...
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiEdge3D`2.GetHashCode">
            <summary>
            ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiEdge3D`2.#ctor">
            <summary>
            Create an instance of the edge.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiEdge3D`2.#ctor(`1,`1)">
            <summary>
            Create an instance of the edge.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.VoronoiMesh3D">
            <summary>
            A factory class for creating a Voronoi mesh.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiMesh3D.Create``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiMesh3D.Create``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiMesh3D.Create``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.VoronoiMesh3D`3">
            <summary>
            A representation of a voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="T:WebChemistry.Framework.Geometry.VoronoiMesh3D`3.EdgeComparer">
            <summary>
            This is probably not needed, but might make things a tiny bit faster.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.VoronoiMesh3D`3.Vertices">
            <summary>
            Cells of the diagram.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Geometry.VoronoiMesh3D`3.Edges">
            <summary>
            Edges connecting the cells. 
            The same information can be retrieved Cells' Adjacency.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiMesh3D`3.Create(System.Collections.Generic.IEnumerable{`0},System.Func{`0,WebChemistry.Framework.Math.Vector3D})">
            <summary>
            Create a voronoi diagram of the input data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:WebChemistry.Framework.Geometry.VoronoiMesh3D`3.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.Angle(WebChemistry.Framework.Math.Vector3D,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Angle in radians</returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.Add(WebChemistry.Framework.Math.Vector,WebChemistry.Framework.Math.Vector)">
            <summary>
            Adds 2 vectors. Checks dimensions.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.AddFast(WebChemistry.Framework.Math.Vector,WebChemistry.Framework.Math.Vector,System.Int32)">
            <summary>
            Does not check for dimensions (slightly faster than Add)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.Subtract(WebChemistry.Framework.Math.Vector,WebChemistry.Framework.Math.Vector)">
            <summary>
            Subtracts 2 vectors. Checks dimensions.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.SubtractFast(WebChemistry.Framework.Math.Vector,WebChemistry.Framework.Math.Vector,System.Int32)">
            <summary>
            Does not check for dimensions (slightly faster than Subtract)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.Dot(WebChemistry.Framework.Math.Vector,WebChemistry.Framework.Math.Vector)">
            <summary>
            Dot product. Checks dimensions.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.DotFast(WebChemistry.Framework.Math.Vector,WebChemistry.Framework.Math.Vector,System.Int32)">
            <summary>
            Does not check for dimensions (slightly faster than Dot)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.LUDecomposition(WebChemistry.Framework.Math.Matrix)">
            <summary>
              LU decomposition of A.
            </summary>
            <param name = "m">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>A matrix of equal size to A that combines the L and U. Here the diagonals belongs to L and the U's diagonal elements are all 1.</returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.LUDecompositionInPlace(WebChemistry.Framework.Math.Matrix,System.Int32)">
            <summary>
            Computes LU decomposition of m "in place".
            </summary>
            <param name="m"></param>
            <returns>LU Decomposition of m stored in m.</returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathEx.Solve(WebChemistry.Framework.Math.Matrix,WebChemistry.Framework.Math.Vector)">
            <summary>
            !!!! This does not work when there are zero diagonal elements, use at own risk.
            </summary>
            <param name="m"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.MathHelper.SphereFromPoints(WebChemistry.Framework.Math.Vector3D[],WebChemistry.Framework.Math.Vector3D@,System.Double@)">
            <summary>
            Computes the center and radius of a sphere determined by 4 points.
            Implementation of http://mathworld.wolfram.com/Circumsphere.html.
            </summary>
            <param name="points">Array of 4 points</param>
            <param name="center"></param>
            <param name="radius"></param>
            <returns>Center and radius of the sphere.</returns>
        </member>
        <member name="P:WebChemistry.Framework.Math.Matrix3D.Identity">
            <summary>
            Returns an identity matrix instance
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Math.Matrix3D.HasInverse">
            <summary>
            Returns true if the matrix has an inverse
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.Matrix3D.Determinant">
            <summary>
            Returns the determinant of the matrix
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.Matrix3D.Append(WebChemistry.Framework.Math.Matrix3D)">
            <summary>
            Appends the matrix to the current matrix
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:WebChemistry.Framework.Math.Matrix3D.Multiply(WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Multiples the vector by the matrix i.e. v * m
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Matrix3D.Transform(WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Multiplies the point by the matrix i.e. p * m
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Matrix3D.Transpose">
            <summary>
            Transposes the current matrix
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.Matrix3D.Invert">
            <summary>
            Inverts this instance of the matrix
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Math.Plane3D">
            <summary>
            A representation of a 3D plane.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.ToString">
            <summary>
            Represents the plane as Ax + By + Cz + D = 0.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebChemistry.Framework.Math.Plane3D.Normal">
            <summary>
            Normal of the plane.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.FromPoints(WebChemistry.Framework.Math.Vector3D,WebChemistry.Framework.Math.Vector3D,WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Normal = (b - a) x (c - b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.DistanceTo(WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Calculates the absolute distance of a point to the plane.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.DistanceToSigned(WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Calculates the "signed" distance of a point to the plane.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.ProjectToPlane(WebChemistry.Framework.Math.Vector3D)">
            <summary>
            Projects the supplied point to the plane.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.GetAngleInRadians(WebChemistry.Framework.Math.Line3D)">
            <summary>
            Returns angle in radians between the plane and the line.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Math.Plane3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a representation of a plane a x + b y + c z + d = 0.
            Parameters get normalized.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:WebChemistry.Framework.Math.Rotation3D.CreateRotationMatrix(WebChemistry.Framework.Math.Vector3D,WebChemistry.Framework.Math.Vector3D,System.Double)">
            <summary>
            Creates a rotation matrix
            </summary>
            <param name="center">Center</param>
            <param name="axis">Axis</param>
            <param name="angle">Angle in degrees</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="T:WebChemistry.Framework.Math.Vector">
            <summary>
            Represents a double vector
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Math.Vector.#ctor(System.Double[],System.Boolean)">
            <summary>
            Creates an instance of a vector
            </summary>
            <param name="data"></param>
            <param name="copy">determine whether to copy the data or not</param>
        </member>
        <member name="T:WebChemistry.Framework.Utils.CollectionChangedObserver`1">
            <summary>
            A weak collection changed observer.
            A reference to this object has to be kept in order for the observers to remain active.
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:WebChemistry.Framework.Utils.CollectionChangedObserver`1.OnAdd(System.Action{`0})">
            <summary>
            Assigns a method to be called when an element is added.
            </summary>
            <param name="onAdd"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Utils.CollectionChangedObserver`1.OnRemove(System.Action{`0})">
            <summary>
            Assigns a method to be called when an element is removed.
            </summary>
            <param name="onRemove"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Utils.CollectionChangedObserver`1.OnReset(System.Action)">
            <summary>
            Assigns a method to be called when the collection is reset.
            </summary>
            <param name="onReset"></param>
            <returns></returns>
        </member>
        <member name="M:WebChemistry.Framework.Utils.CollectionChangedObserver`1.#ctor(System.Collections.Specialized.INotifyCollectionChanged,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Creates a weak collection changed observer.
            </summary>
            <param name="collection"></param>
            <param name="scheduler"></param>
        </member>
        <member name="M:WebChemistry.Framework.Utils.CollectionChangedObserver`1.Dispose">
            <summary>
            By disposing the object, the collection changed events are ignored.
            additionally, it is recommended to set the variable to null.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Utils.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of rootInstance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the rootInstance listening for the event.
            </summary>    
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakEventListener`3._weakSource">
            <summary>
            To hold a reference to source object. With this instance the WeakEventListener 
            can guarantee that the handler get unregistered when listener is released.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakEventListener`3._onEventAction">
            <summary>
            Delegate to the method to call when the event fires.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakEventListener`3._onDetachAction">
            <summary>
            Delegate to the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakEventListener`3.#ctor(`0,`1)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="rootInstance">Instance subscribing to the event.</param>
        </member>
        <member name="P:WebChemistry.Framework.Utils.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:WebChemistry.Framework.Utils.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakEventListener`3.OnEvent(System.Object,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Utils.WeakInteractiveListener`1">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of rootInstance listening for the event.</typeparam>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakInteractiveListener`1._weakInstance">
            <summary>
            WeakReference to the rootInstance listening for the event.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakInteractiveListener`1._weakSource">
            <summary>
            To hold a reference to source object. With this instance the WeakEventListener 
            can guarantee that the handler get unregistered when listener is released.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakInteractiveListener`1._onEventAction">
            <summary>
            Delegate to the method to call when the event fires.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakInteractiveListener`1._onDetachAction">
            <summary>
            Delegate to the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakInteractiveListener`1.#ctor(`0,WebChemistry.Framework.Core.IInteractive)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="rootInstance">Instance subscribing to the event.</param>
        </member>
        <member name="P:WebChemistry.Framework.Utils.WeakInteractiveListener`1.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakInteractiveListener`1.OnEvent(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakInteractiveListener`1.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="T:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of rootInstance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2._weakInstance">
            <summary>
            WeakReference to the rootInstance listening for the event.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2._weakSource">
            <summary>
            To hold a reference to source object. With this instance the WeakEventListener 
            can guarantee that the handler get unregistered when listener is released.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2._onEventAction">
            <summary>
            Delegate to the method to call when the event fires.
            </summary>
        </member>
        <member name="F:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2._onDetachAction">
            <summary>
            Delegate to the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="rootInstance">Instance subscribing to the event.</param>
        </member>
        <member name="P:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2.OnEvent(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:WebChemistry.Framework.Utils.WeakNotifyPropertyChangedListener`2.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
    </members>
</doc>
